{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/pages/ListDashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { Segment, Container, Breadcrumb, List, Header } from \"semantic-ui-react\";\nimport { listDashboards } from '../api/score';\nimport urls from '../utils/urls';\n\nconst ListDashboard = () => {\n  _s();\n\n  const [dashboards, setDashboards] = useState(null);\n  useEffect(() => {\n    listDashboards().then(response => {\n      setDashboards(response.data);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: /*#__PURE__*/_jsxDEV(Segment.Group, {\n      children: [/*#__PURE__*/_jsxDEV(Segment, {\n        loading: !dashboards,\n        children: /*#__PURE__*/_jsxDEV(Breadcrumb, {\n          size: \"massive\",\n          children: /*#__PURE__*/_jsxDEV(Breadcrumb.Section, {\n            active: true,\n            children: \"Pain\\xE9is\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 21,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Segment, {\n        children: /*#__PURE__*/_jsxDEV(List, {\n          divided: true,\n          relaxed: true,\n          children: [/*#__PURE__*/_jsxDEV(List.Item, {\n            href: `${urls.dashboardCreation}`,\n            children: [/*#__PURE__*/_jsxDEV(List.Icon, {\n              name: \"plus\",\n              size: \"large\",\n              verticalAlign: \"middle\",\n              style: {\n                paddingLeft: 2,\n                paddingRight: 9\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 27,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n              verticalAlign: \"middle\",\n              children: /*#__PURE__*/_jsxDEV(Header, {\n                color: \"blue\",\n                size: \"small\",\n                children: \"Criar novo Painel\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 29,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 28,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 13\n          }, this), dashboards && dashboards.map(dash => /*#__PURE__*/_jsxDEV(List.Item, {\n            href: `${urls.dashboardDetails}/${dash.id}`,\n            children: [/*#__PURE__*/_jsxDEV(List.Icon, {\n              name: \"chart pie\",\n              size: \"large\",\n              verticalAlign: \"middle\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n              children: [/*#__PURE__*/_jsxDEV(Header, {\n                color: \"blue\",\n                size: \"small\",\n                children: dash.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 36,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(List.Description, {\n                children: [dash.categoriesCount, \" categorias | \", dash.metricsCount, \" m\\xE9tricas\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 37,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 35,\n              columnNumber: 17\n            }, this)]\n          }, dash.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ListDashboard, \"84F4OCME5NVQvVO072U+s30AmNw=\");\n\n_c = ListDashboard;\nexport default ListDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListDashboard\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/pages/ListDashboard.jsx"],"names":["React","useState","useEffect","Segment","Container","Breadcrumb","List","Header","listDashboards","urls","ListDashboard","dashboards","setDashboards","then","response","data","dashboardCreation","paddingLeft","paddingRight","map","dash","dashboardDetails","id","name","categoriesCount","metricsCount"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport { Segment, Container, Breadcrumb, List, Header } from \"semantic-ui-react\";\nimport { listDashboards } from '../api/score';\nimport urls from '../utils/urls';\n\nconst ListDashboard = () => {\n  const [dashboards, setDashboards] = useState(null);\n\n  useEffect(() => {\n    listDashboards().then(response => {\n      setDashboards(response.data);\n    });\n  }, [])\n\n  return (\n    <Container>\n      <Segment.Group>\n        <Segment loading={!dashboards}>\n          <Breadcrumb size=\"massive\">\n            <Breadcrumb.Section active>Painéis</Breadcrumb.Section>\n          </Breadcrumb>\n        </Segment>\n        <Segment>\n          <List divided relaxed>\n            <List.Item href={`${urls.dashboardCreation}`}>\n              <List.Icon name='plus' size='large' verticalAlign='middle' style={{ paddingLeft: 2, paddingRight: 9 }} />\n              <List.Content verticalAlign=\"middle\">\n                <Header color=\"blue\" size=\"small\">Criar novo Painel</Header>\n              </List.Content>\n            </List.Item>\n            {dashboards && dashboards.map(dash => (\n              <List.Item href={`${urls.dashboardDetails}/${dash.id}`} key={dash.id}>\n                <List.Icon name='chart pie' size='large' verticalAlign='middle' />\n                <List.Content>\n                  <Header color=\"blue\" size=\"small\">{dash.name}</Header>\n                  <List.Description>{dash.categoriesCount} categorias | {dash.metricsCount} métricas</List.Description>\n                </List.Content>\n              </List.Item>\n            ))}\n          </List>\n        </Segment>\n      </Segment.Group>\n    </Container>\n  );\n}\n\nexport default ListDashboard;\n"]},"metadata":{},"sourceType":"module"}