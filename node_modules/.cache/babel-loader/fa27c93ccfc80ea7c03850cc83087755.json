{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/CategoryEditor.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Form, Grid } from 'semantic-ui-react';\nimport { PieChart } from 'react-minimal-pie-chart';\nimport { AppContext } from '../context/AppContext';\n\nconst CategoryEditor = ({\n  data,\n  onChange\n}) => {\n  _s();\n\n  const {\n    category\n  } = data;\n  const {\n    register,\n    getValues\n  } = useForm();\n  const {\n    state\n  } = useContext(AppContext);\n  const [values, setValues] = useState();\n  const [debounce, setDebounce] = useState();\n  const availableColors = [{\n    style: {\n      backgroundColor: \"red\"\n    },\n    key: \"red\",\n    value: \"red\"\n  }, {\n    style: {\n      backgroundColor: \"orange\"\n    },\n    key: \"orange\",\n    value: \"orange\"\n  }, {\n    style: {\n      backgroundColor: \"yellow\"\n    },\n    key: \"yellow\",\n    value: \"yellow\"\n  }, {\n    style: {\n      backgroundColor: \"olive\"\n    },\n    key: \"olive\",\n    value: \"olive\"\n  }, {\n    style: {\n      backgroundColor: \"green\"\n    },\n    key: \"green\",\n    value: \"green\"\n  }, {\n    style: {\n      backgroundColor: \"teal\"\n    },\n    key: \"teal\",\n    value: \"teal\"\n  }, {\n    style: {\n      backgroundColor: \"blue\"\n    },\n    key: \"blue\",\n    value: \"blue\"\n  }, {\n    style: {\n      backgroundColor: \"violet\"\n    },\n    key: \"violet\",\n    value: \"violet\"\n  }, {\n    style: {\n      backgroundColor: \"purple\"\n    },\n    key: \"purple\",\n    value: \"purple\"\n  }, {\n    style: {\n      backgroundColor: \"pink\"\n    },\n    key: \"pink\",\n    value: \"pink\"\n  }, {\n    style: {\n      backgroundColor: \"brown\"\n    },\n    key: \"brown\",\n    value: \"brown\"\n  }, {\n    style: {\n      backgroundColor: \"grey\"\n    },\n    key: \"grey\",\n    value: \"grey\"\n  }, {\n    style: {\n      backgroundColor: \"black\"\n    },\n    key: \"black\",\n    value: \"black\"\n  }];\n\n  const flushChanges = () => {\n    clearTimeout(debounce);\n    const ref = setTimeout(() => {\n      onChange({ ...category,\n        ...values,\n        ...getValues()\n      });\n    }, 300);\n    setDebounce(ref);\n  };\n\n  useEffect(flushChanges, [values]);\n\n  const handleChange = (_, props) => {\n    setValues({ ...values,\n      [props.name]: props.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Nome\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          name: \"name\",\n          defaultValue: category.name,\n          ref: register({\n            required: \"O campo Nome é obrigatório.\"\n          }),\n          onChange: flushChanges\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n        required: true,\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"weight\",\n          children: \"Peso\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"weight\",\n          defaultValue: category.weight,\n          ref: register({\n            required: \"O campo Peso é obrigatório.\"\n          }),\n          onChange: flushChanges\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      padded: true,\n      style: {\n        height: 300\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n        columns: 3,\n        verticalAlign: \"middle\",\n        children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 6,\n          children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n            centered: true,\n            verticalAlign: \"middle\",\n            children: [/*#__PURE__*/_jsxDEV(PieChart, {\n              rounded: true,\n              lineWidth: \"20\",\n              animate: true,\n              data: [{\n                value: 50,\n                color: category.color\n              }],\n              totalValue: 100,\n              background: \"#bfbfbf\",\n              lengthAngle: 270,\n              startAngle: 135,\n              viewBoxSize: [100, 87],\n              style: {\n                width: 250,\n                height: 220,\n                position: \"absolute\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Dropdown, {\n              required: true,\n              label: \"Cor\",\n              name: \"color\",\n              defaultValue: category.color,\n              selection: true,\n              fluid: true,\n              options: availableColors,\n              onChange: handleChange,\n              style: {\n                backgroundColor: category.color,\n                width: 55\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 10,\n          style: {\n            maxHeight: 300\n          },\n          children: /*#__PURE__*/_jsxDEV(Form.Dropdown, {\n            required: true,\n            label: \"M\\xE9tricas\",\n            name: \"metrics\",\n            defaultValue: category.metrics,\n            multiple: true,\n            selection: true,\n            search: true,\n            clearable: true,\n            options: state.metrics.map(metric => ({\n              key: metric.id,\n              text: metric.id,\n              value: metric.id\n            })),\n            onChange: handleChange\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(CategoryEditor, \"UG+CC2Tz3JFnoc3D3lPoTTYgfoc=\", false, function () {\n  return [useForm];\n});\n\n_c = CategoryEditor;\nexport default CategoryEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryEditor\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/CategoryEditor.jsx"],"names":["React","useState","useContext","useEffect","useForm","Form","Grid","PieChart","AppContext","CategoryEditor","data","onChange","category","register","getValues","state","values","setValues","debounce","setDebounce","availableColors","style","backgroundColor","key","value","flushChanges","clearTimeout","ref","setTimeout","handleChange","_","props","name","required","weight","height","color","width","position","maxHeight","metrics","map","metric","id","text"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { Form, Grid } from 'semantic-ui-react';\nimport { PieChart } from 'react-minimal-pie-chart';\nimport { AppContext } from '../context/AppContext'\n\nconst CategoryEditor = ({ data, onChange }) => {\n  const { category } = data;\n  const { register, getValues } = useForm();\n  const { state } = useContext(AppContext);\n  const [values, setValues] = useState();\n  const [debounce, setDebounce] = useState();\n  const availableColors = [\n    { style: { backgroundColor: \"red\" }, key: \"red\", value: \"red\" },\n    { style: { backgroundColor: \"orange\" }, key: \"orange\", value: \"orange\" },\n    { style: { backgroundColor: \"yellow\" }, key: \"yellow\", value: \"yellow\" },\n    { style: { backgroundColor: \"olive\" }, key: \"olive\", value: \"olive\" },\n    { style: { backgroundColor: \"green\" }, key: \"green\", value: \"green\" },\n    { style: { backgroundColor: \"teal\" }, key: \"teal\", value: \"teal\" },\n    { style: { backgroundColor: \"blue\" }, key: \"blue\", value: \"blue\" },\n    { style: { backgroundColor: \"violet\" }, key: \"violet\", value: \"violet\" },\n    { style: { backgroundColor: \"purple\" }, key: \"purple\", value: \"purple\" },\n    { style: { backgroundColor: \"pink\" }, key: \"pink\", value: \"pink\" },\n    { style: { backgroundColor: \"brown\" }, key: \"brown\", value: \"brown\" },\n    { style: { backgroundColor: \"grey\" }, key: \"grey\", value: \"grey\" },\n    { style: { backgroundColor: \"black\" }, key: \"black\", value: \"black\" },\n  ]\n\n  const flushChanges = () => {\n    clearTimeout(debounce);\n    const ref = setTimeout(() => {\n      onChange({\n        ...category,\n        ...values,\n        ...getValues(),\n      })\n    }, 300);\n    setDebounce(ref);\n  };\n\n  useEffect(flushChanges, [values]);\n\n  const handleChange = (_, props) => {\n    setValues({\n      ...values,\n      [props.name]: props.value,\n    });\n  }\n\n  return (\n    <>\n      <Form.Group widths=\"equal\">\n        <Form.Field>\n          <label htmlFor=\"name\">Nome</label>\n          <input name=\"name\" defaultValue={category.name} ref={register({ required: \"O campo Nome é obrigatório.\" })} onChange={flushChanges} />\n        </Form.Field>\n        <Form.Field required>\n          <label htmlFor=\"weight\">Peso</label>\n          <input type=\"number\" name=\"weight\" defaultValue={category.weight} ref={register({ required: \"O campo Peso é obrigatório.\" })} onChange={flushChanges} />\n        </Form.Field>\n      </Form.Group>\n      <Grid padded style={{ height: 300 }}>\n        <Grid.Row columns={3} verticalAlign=\"middle\">\n          <Grid.Column width={6}>\n            <Grid.Row centered verticalAlign=\"middle\">\n              <PieChart\n                rounded\n                lineWidth=\"20\"\n                animate\n                data={[{ value: 50, color: category.color }]}\n                totalValue={100}\n                background=\"#bfbfbf\"\n                lengthAngle={270}\n                startAngle={135}\n                viewBoxSize={[100, 87]}\n                style={{ width: 250, height: 220, position: \"absolute\" }}\n              />\n              <Form.Dropdown\n                required\n                label=\"Cor\"\n                name=\"color\"\n                defaultValue={category.color}\n                selection\n                fluid\n                options={availableColors}\n                onChange={handleChange}\n                style={{ backgroundColor: category.color, width: 55 }}\n              />\n            </Grid.Row>\n          </Grid.Column>\n          <Grid.Column width={10} style={{ maxHeight: 300 }}>\n            <Form.Dropdown\n              required\n              label=\"Métricas\"\n              name=\"metrics\"\n              defaultValue={category.metrics}\n              multiple\n              selection\n              search\n              clearable\n              options={state.metrics.map((metric) => ({ key: metric.id, text: metric.id, value: metric.id }))}\n              onChange={handleChange}\n            />\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </>\n  );\n};\n\nexport default CategoryEditor;\n"]},"metadata":{},"sourceType":"module"}