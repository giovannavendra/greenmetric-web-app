{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/MetricsEditor.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Form, Checkbox, Segment } from 'semantic-ui-react';\nimport { getMetricbyId, putMetric, postMetric } from '../utils/data';\nconst typesOptions = [{\n  key: '1',\n  text: 'Inteiro',\n  value: 'INTEGER'\n}, {\n  key: '2',\n  text: 'Real',\n  value: 'FLOAT'\n}, {\n  key: '3',\n  text: 'Opções',\n  value: 'SELECT'\n}];\nconst hasDataOptions = [{\n  key: '1',\n  text: 'Sim',\n  value: true\n}, {\n  key: '2',\n  text: 'Não',\n  value: false\n}];\nconst evidenceRequirementOptions = [{\n  key: '1',\n  text: 'Nenhuma evidência',\n  value: 'NONE'\n}, {\n  key: '2',\n  text: 'Evidência opcional',\n  value: 'OPTIONAL'\n}, {\n  key: '3',\n  text: 'Evidência obrigatória',\n  value: 'REQUIRED'\n}];\nconst defaultState = {\n  valueType: '',\n  hasData: '',\n  evidenceRequirement: '',\n  unit: '',\n  id: '',\n  title: '',\n  description: '',\n  expression: '',\n  dependencies: '',\n  data: null\n};\n\nconst MetricsEditor = ({\n  id\n}) => {\n  _s();\n\n  const [info, setInfo] = useState({ ...defaultState\n  });\n  const [isNewMetric, setIsNewMetric] = useState(true);\n  const [options, setOptions] = useState([]);\n  const [orignalValueType, setOriginalValueType] = useState(null);\n  useEffect(() => {\n    const fetchData = async id => {\n      setInfo(defaultState);\n      if (!id) return;\n\n      try {\n        var _data$data, _data$data2;\n\n        const {\n          data\n        } = await getMetricbyId(id);\n        setIsNewMetric(!!!data);\n        setInfo(data);\n        setOriginalValueType(data.valueType);\n        if (data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.hasOwnProperty('options')) setOptions(data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : _data$data2.options);\n      } catch {\n        setIsNewMetric(true);\n        setInfo({ ...defaultState,\n          id: `${id}/`\n        });\n      }\n    };\n\n    fetchData(id);\n  }, [id]);\n\n  const handleChange = (name, value) => {\n    setInfo({ ...info,\n      [name]: value\n    });\n  }; // TODO, it makes the metric always be a SELECT\n\n\n  const onSubmit = async () => {\n    let data = { ...info.data,\n      options: options\n    };\n    if (!info.data || orignalValueType !== info.valueType) data = info.valueType === 'SELECT' ? {\n      currentOption: options[0],\n      options: options\n    } : '';\n    const submitInfo = { ...info,\n      data\n    };\n\n    try {\n      if (isNewMetric) await postMetric(submitInfo);else await putMetric(submitInfo);\n      window.location.reload();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const addOption = () => {\n    setOptions([...options, '']);\n  };\n\n  const removeOption = () => {\n    setOptions(options.slice(0, -1));\n  };\n\n  const handleChangeOption = (index, value) => {\n    const newOptions = [...options];\n    newOptions[index] = value;\n    setOptions(newOptions);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Segment, {\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n        children: /*#__PURE__*/_jsxDEV(Checkbox, {\n          checked: !isNewMetric,\n          label: 'Atualizar ID',\n          onChange: (e, {\n            checked\n          }) => {\n            setIsNewMetric(!checked);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        widths: \"equal\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Select, {\n          options: typesOptions,\n          placeholder: \"Tipo\",\n          label: \"Tipo\",\n          name: \"valueType\",\n          value: info.valueType,\n          onChange: (e, {\n            name,\n            value\n          }) => handleChange(name, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n          options: hasDataOptions,\n          placeholder: \"O campo \\xE9 edit\\xE1vel?\",\n          label: \"Resposta\",\n          name: \"hasData\",\n          value: info.hasData,\n          onChange: (e, {\n            name,\n            value\n          }) => handleChange(name, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        widths: \"equal\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Select, {\n          options: evidenceRequirementOptions,\n          placeholder: \"O campo possui evid\\xEAncia?\",\n          label: \"Evid\\xEAncia\",\n          name: \"evidenceRequirement\",\n          value: info.evidenceRequirement,\n          onChange: (e, {\n            name,\n            value\n          }) => handleChange(name, value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          label: \"Unidade\",\n          placeholder: \"Ex: m\\xB2, %\",\n          name: \"unit\",\n          value: info.unit,\n          onChange: ({\n            target\n          }) => handleChange(target.name, target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        widths: \"equal\",\n        children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n          disabled: !isNewMetric,\n          label: \"ID\",\n          placeholder: \"Valor \\xFAnico de identifica\\xE7\\xE3o da m\\xE9trica no banco de dados\",\n          name: \"id\",\n          value: info.id,\n          onChange: ({\n            target\n          }) => handleChange(target.name, target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          label: \"T\\xEDtulo\",\n          placeholder: \"Nome da m\\xE9trica\",\n          name: \"title\",\n          value: info.title,\n          onChange: ({\n            target\n          }) => handleChange(target.name, target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n        label: \"Descri\\xE7\\xE3o\",\n        placeholder: \"Descreva em palavras como calcular esta m\\xE9trica\",\n        name: \"description\",\n        value: info.description,\n        onChange: ({\n          target\n        }) => handleChange(target.name, target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Express\\xE3o\",\n        placeholder: \"F\\xF3rmula matem\\xE1tica para calcular a m\\xE9trica\",\n        name: \"expression\",\n        value: info.expression,\n        onChange: ({\n          target\n        }) => handleChange(target.name, target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }, this), info.valueType === 'SELECT' && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Op\\xE7\\xF5es\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this), options.map((el, index) => /*#__PURE__*/_jsxDEV(Form.Input, {\n          placeholder: \"Op\\xE7\\xE3o 1\",\n          name: \"options\",\n          value: el,\n          onChange: ({\n            target\n          }) => handleChangeOption(index, target.value)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 25\n        }, this)), /*#__PURE__*/_jsxDEV(Form.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Button, {\n            color: \"green\",\n            type: \"button\",\n            onClick: () => {\n              addOption();\n            },\n            children: \"Adicionar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Form.Button, {\n            color: \"red\",\n            type: \"button\",\n            onClick: () => {\n              removeOption();\n            },\n            children: \"Remover\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app-footer\",\n        children: /*#__PURE__*/_jsxDEV(Form.Button, {\n          primary: true,\n          className: \"centered\",\n          color: \"black\",\n          type: \"submit\",\n          children: \"Enviar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MetricsEditor, \"AhB5RVZLc9fxPBOl/PEjBckbLks=\");\n\n_c = MetricsEditor;\nexport default MetricsEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"MetricsEditor\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/MetricsEditor.jsx"],"names":["React","useEffect","useState","Form","Checkbox","Segment","getMetricbyId","putMetric","postMetric","typesOptions","key","text","value","hasDataOptions","evidenceRequirementOptions","defaultState","valueType","hasData","evidenceRequirement","unit","id","title","description","expression","dependencies","data","MetricsEditor","info","setInfo","isNewMetric","setIsNewMetric","options","setOptions","orignalValueType","setOriginalValueType","fetchData","hasOwnProperty","handleChange","name","onSubmit","currentOption","submitInfo","window","location","reload","e","console","log","addOption","removeOption","slice","handleChangeOption","index","newOptions","checked","target","map","el"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, Checkbox, Segment } from 'semantic-ui-react'\nimport { getMetricbyId, putMetric, postMetric } from '../utils/data'\n\nconst typesOptions = [\n    { key: '1', text: 'Inteiro', value: 'INTEGER' },\n    { key: '2', text: 'Real', value: 'FLOAT' },\n    { key: '3', text: 'Opções', value: 'SELECT' },\n]\n\nconst hasDataOptions = [\n    { key: '1', text: 'Sim', value: true },\n    { key: '2', text: 'Não', value: false },\n]\n\nconst evidenceRequirementOptions = [\n    { key: '1', text: 'Nenhuma evidência', value: 'NONE' },\n    { key: '2', text: 'Evidência opcional', value: 'OPTIONAL' },\n    { key: '3', text: 'Evidência obrigatória', value: 'REQUIRED' },\n]\n\nconst defaultState = {\n    valueType: '',\n    hasData: '',\n    evidenceRequirement: '',\n    unit: '',\n    id: '',\n    title: '',\n    description: '',\n    expression: '',\n    dependencies: '',\n    data: null\n}\n\nconst MetricsEditor = ({ id }) => {\n\n    const [info, setInfo] = useState({ ...defaultState })\n    const [isNewMetric, setIsNewMetric] = useState(true)\n    const [options, setOptions] = useState([])\n    const [orignalValueType, setOriginalValueType] = useState(null)\n\n    useEffect(() => {\n        const fetchData = async (id) => {\n\n            setInfo(defaultState)\n\n            if (!id) return\n\n            try {\n                const { data } = await getMetricbyId(id)\n                setIsNewMetric(!!!data)\n                setInfo(data)\n                setOriginalValueType(data.valueType)\n                if (data?.data?.hasOwnProperty('options'))\n                    setOptions(data?.data?.options)\n            } catch {\n                setIsNewMetric(true)\n                setInfo({ ...defaultState, id: `${id}/` })\n            }\n        }\n\n        fetchData(id)\n    }, [id])\n\n    const handleChange = (name, value) => {\n        setInfo({ ...info, [name]: value })\n    }\n\n    // TODO, it makes the metric always be a SELECT\n    const onSubmit = async () => {\n        let data = { ...info.data, options: options }\n        if (!info.data || orignalValueType !== info.valueType)\n            data = info.valueType === 'SELECT'\n                ? { currentOption: options[0], options: options }\n                : ''\n\n        const submitInfo = { ...info, data }\n\n        try {\n            if (isNewMetric)\n                await postMetric(submitInfo)\n            else\n                await putMetric(submitInfo)\n            window.location.reload()\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const addOption = () => {\n        setOptions([...options, ''])\n    }\n\n    const removeOption = () => {\n        setOptions(options.slice(0, -1))\n    }\n\n    const handleChangeOption = (index, value) => {\n        const newOptions = [...options]\n        newOptions[index] = value\n        setOptions(newOptions)\n    }\n\n    return (\n        <Segment>\n        <Form onSubmit={onSubmit}>\n            <Form.Field>\n                <Checkbox\n                    checked={!isNewMetric}\n                    label={'Atualizar ID'}\n                    onChange={(e, { checked }) => { setIsNewMetric(!checked) }} />\n            </Form.Field>\n            <Form.Group widths='equal'>\n                <Form.Select\n                    options={typesOptions}\n                    placeholder='Tipo'\n                    label='Tipo'\n                    name='valueType'\n                    value={info.valueType}\n                    onChange={(e, { name, value }) => handleChange(name, value)}\n                />\n                <Form.Select\n                    options={hasDataOptions}\n                    placeholder='O campo é editável?'\n                    label='Resposta'\n                    name='hasData'\n                    value={info.hasData}\n                    onChange={(e, { name, value }) => handleChange(name, value)}\n                />\n            </Form.Group>\n            <Form.Group widths='equal'>\n                <Form.Select\n                    options={evidenceRequirementOptions}\n                    placeholder='O campo possui evidência?'\n                    label='Evidência'\n                    name='evidenceRequirement'\n                    value={info.evidenceRequirement}\n                    onChange={(e, { name, value }) => handleChange(name, value)}\n                />\n                <Form.Input\n                    label=\"Unidade\"\n                    placeholder=\"Ex: m², %\"\n                    name='unit'\n                    value={info.unit}\n                    onChange={({ target }) => handleChange(target.name, target.value)}\n                />\n            </Form.Group>\n            <Form.Group widths='equal'>\n                <Form.Input\n                    disabled={!isNewMetric}\n                    label=\"ID\"\n                    placeholder=\"Valor único de identificação da métrica no banco de dados\"\n                    name='id'\n                    value={info.id}\n                    onChange={({ target }) => handleChange(target.name, target.value)}\n                />\n                <Form.Input\n                    label=\"Título\"\n                    placeholder=\"Nome da métrica\"\n                    name='title'\n                    value={info.title}\n                    onChange={({ target }) => handleChange(target.name, target.value)}\n                />\n            </Form.Group>\n            <Form.TextArea\n                label=\"Descrição\"\n                placeholder=\"Descreva em palavras como calcular esta métrica\"\n                name='description'\n                value={info.description}\n                onChange={({ target }) => handleChange(target.name, target.value)}\n            />\n            <Form.Input\n                label=\"Expressão\"\n                placeholder=\"Fórmula matemática para calcular a métrica\"\n                name='expression'\n                value={info.expression}\n                onChange={({ target }) => handleChange(target.name, target.value)}\n            />\n            {info.valueType === 'SELECT' &&\n                <>\n                    <p>Opções</p>\n                    {options.map((el, index) =>\n                        <Form.Input\n                            key={index}\n                            placeholder=\"Opção 1\"\n                            name='options'\n                            value={el}\n                            onChange={({ target }) => handleChangeOption(index, target.value)}\n                        />)}\n                    <Form.Group>\n                        <Form.Button\n                            color='green'\n                            type='button'\n                            onClick={() => { addOption() }}>\n                            Adicionar\n                        </Form.Button>\n                        <Form.Button\n                            color='red'\n                            type='button'\n                            onClick={() => { removeOption() }}>\n                            Remover\n                        </Form.Button>\n                    </Form.Group>\n                </>\n            }\n            <div className='app-footer'>\n                <Form.Button\n                    primary\n                    className=\"centered\"\n                    color='black'\n                    type='submit'>Enviar</Form.Button>\n            </div>\n        </Form>\n        </Segment>\n    )\n}\n\nexport default MetricsEditor"]},"metadata":{},"sourceType":"module"}