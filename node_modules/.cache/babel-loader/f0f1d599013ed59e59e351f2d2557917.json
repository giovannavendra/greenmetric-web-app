{"ast":null,"code":"export const toDirectory = (dir, pathSplitted, data) => {\n  if (pathSplitted.length === 0) return {\n    name: data.id.split(\"/\").slice(-1)[0],\n    data\n  };\n  const findChild = dir.children.find(el => el.name === pathSplitted[0]);\n  const newEl = toDirectory(findChild ? findChild : {\n    name: pathSplitted[0],\n    children: []\n  }, pathSplitted.slice(1), data);\n  if (!findChild) dir.children.push(newEl);else dir.children.splice(dir.children.indexOf(findChild), 1, newEl);\n  return dir;\n};\nexport const metricsArrToDir = (arr, dir) => {\n  for (let el of arr) toDirectory(dir, el.id.split(\"/\"), el);\n\n  return dir;\n};\nexport const parseSelect = options => {\n  return options.map(el => ({\n    key: el.split(\" \")[0],\n    text: el,\n    value: el\n  }));\n};\nexport const genFormsList = (metrics = [], selectedDir = []) => {\n  const newMetrics = metrics.map(el => {\n    return { ...el,\n      id: el.id.slice(-1) === \"/\" ? el.id : `${el.id}/`\n    };\n  });\n  const newSelectedDir = selectedDir.map(el => `${el}/`);\n  return newSelectedDir.reduce((acc, id) => [...acc, ...newMetrics.map(q => q.id.includes(id) && !!!acc.find(el => el === q.id.slice(0, -1)) ? q.id.slice(0, -1) : null)], []);\n};","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/utils/utils.js"],"names":["toDirectory","dir","pathSplitted","data","length","name","id","split","slice","findChild","children","find","el","newEl","push","splice","indexOf","metricsArrToDir","arr","parseSelect","options","map","key","text","value","genFormsList","metrics","selectedDir","newMetrics","newSelectedDir","reduce","acc","q","includes"],"mappings":"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","sourcesContent":["export const toDirectory = (dir, pathSplitted, data) => {\n  if (pathSplitted.length === 0)\n    return {\n      name: data.id.split(\"/\").slice(-1)[0],\n      data,\n    };\n\n  const findChild = dir.children.find((el) => el.name === pathSplitted[0]);\n  const newEl = toDirectory(\n    findChild ? findChild : { name: pathSplitted[0], children: [] },\n    pathSplitted.slice(1),\n    data\n  );\n  if (!findChild) dir.children.push(newEl);\n  else dir.children.splice(dir.children.indexOf(findChild), 1, newEl);\n\n  return dir;\n};\n\nexport const metricsArrToDir = (arr, dir) => {\n  for (let el of arr) toDirectory(dir, el.id.split(\"/\"), el);\n  return dir;\n};\n\nexport const parseSelect = (options) => {\n  return options.map((el) => ({\n    key: el.split(\" \")[0],\n    text: el,\n    value: el,\n  }));\n};\n\nexport const genFormsList = (metrics = [], selectedDir = []) => {\n  const newMetrics = metrics.map((el) => {\n    return { ...el, id: el.id.slice(-1) === \"/\" ? el.id : `${el.id}/` };\n  });\n  const newSelectedDir = selectedDir.map((el) => `${el}/`);\n\n  return newSelectedDir.reduce(\n    (acc, id) => [\n      ...acc,\n      ...newMetrics.map((q) =>\n        q.id.includes(id) && !!!acc.find((el) => el === q.id.slice(0, -1))\n          ? q.id.slice(0, -1)\n          : null\n      ),\n    ],\n    []\n  );\n};\n"]},"metadata":{},"sourceType":"module"}