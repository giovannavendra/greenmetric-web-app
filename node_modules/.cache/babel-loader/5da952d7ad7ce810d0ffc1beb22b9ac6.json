{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/FormsEditor.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect, useCallback, useMemo } from \"react\";\nimport { AppContext } from \"../context/AppContext\";\nimport { dispatchReset, dispatchSetTitle, EditFormsContext } from \"../context/EditFormsContext\";\nimport Question from \"./Question\";\nimport { Form } from \"semantic-ui-react\";\nimport { genFormsList } from \"../utils/utils\";\nimport { postForms, putForms } from \"../utils/data\";\n\nconst FormsEditor = () => {\n  _s();\n\n  const {\n    state\n  } = useContext(AppContext);\n  const {\n    state: stateEF,\n    dispatch: dispatchEF\n  } = useContext(EditFormsContext);\n  const [idList, setIdList] = useState([]);\n  useEffect(() => {\n    setIdList(genFormsList(state.metrics, Array.from(stateEF.selectedDir)));\n  }, [state, stateEF.selectedDir.size]);\n\n  const onSubmit = async () => {\n    const idListFiltered = idList.map(el => el.id);\n\n    if (stateEF.id) {\n      await putForms(stateEF.id, stateEF.title, idListFiltered);\n    } else {\n      await postForms(stateEF.title, idListFiltered);\n    }\n\n    window.location.reload();\n  };\n\n  const questionList = useMemo(() => idList.map(el => {\n    return /*#__PURE__*/_jsxDEV(Question, {\n      q: el,\n      disabled: true\n    }, el.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 16\n    }, this);\n  }), [idList]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n      name: \"title\",\n      label: \"Nome do fomul\\xE1rio\",\n      value: stateEF.title,\n      onChange: ({\n        target\n      }) => dispatchEF(dispatchSetTitle(target.value))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), questionList, /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-footer\",\n      children: /*#__PURE__*/_jsxDEV(Form.Button, {\n        className: \"centered\",\n        color: \"black\",\n        type: \"submit\",\n        onClick: onSubmit,\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormsEditor, \"Hy6oLs7MKZlfMBYdndPQIso6MwA=\");\n\n_c = FormsEditor;\nexport default FormsEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormsEditor\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/FormsEditor.jsx"],"names":["React","useContext","useState","useEffect","useCallback","useMemo","AppContext","dispatchReset","dispatchSetTitle","EditFormsContext","Question","Form","genFormsList","postForms","putForms","FormsEditor","state","stateEF","dispatch","dispatchEF","idList","setIdList","metrics","Array","from","selectedDir","size","onSubmit","idListFiltered","map","el","id","title","window","location","reload","questionList","target","value"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,EAAsCC,SAAtC,EAAiDC,WAAjD,EAA8DC,OAA9D,QAA6E,OAA7E;AACA,SAASC,UAAT,QAA2B,uBAA3B;AACA,SACIC,aADJ,EAEIC,gBAFJ,EAGIC,gBAHJ,QAIO,6BAJP;AAKA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,eAApC;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACtB,QAAM;AAAEC,IAAAA;AAAF,MAAYf,UAAU,CAACK,UAAD,CAA5B;AACA,QAAM;AAAEU,IAAAA,KAAK,EAAEC,OAAT;AAAkBC,IAAAA,QAAQ,EAAEC;AAA5B,MAA2ClB,UAAU,CAACQ,gBAAD,CAA3D;AAEA,QAAM,CAACW,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,EAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZkB,IAAAA,SAAS,CAACT,YAAY,CAACI,KAAK,CAACM,OAAP,EAAgBC,KAAK,CAACC,IAAN,CAAWP,OAAO,CAACQ,WAAnB,CAAhB,CAAb,CAAT;AACH,GAFQ,EAEN,CAACT,KAAD,EAAQC,OAAO,CAACQ,WAAR,CAAoBC,IAA5B,CAFM,CAAT;;AAIA,QAAMC,QAAQ,GAAG,YAAY;AACzB,UAAMC,cAAc,GAAGR,MAAM,CAACS,GAAP,CAAWC,EAAE,IAAIA,EAAE,CAACC,EAApB,CAAvB;;AACA,QAAId,OAAO,CAACc,EAAZ,EAAgB;AACZ,YAAMjB,QAAQ,CAACG,OAAO,CAACc,EAAT,EAAad,OAAO,CAACe,KAArB,EAA4BJ,cAA5B,CAAd;AACH,KAFD,MAEO;AACH,YAAMf,SAAS,CAACI,OAAO,CAACe,KAAT,EAAgBJ,cAAhB,CAAf;AACH;;AAEDK,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH,GATD;;AAWA,QAAMC,YAAY,GAAG/B,OAAO,CAAC,MAAMe,MAAM,CAACS,GAAP,CAAYC,EAAD,IAAQ;AAClD,wBAAO,QAAC,QAAD;AAAsB,MAAA,CAAC,EAAEA,EAAzB;AAA6B,MAAA,QAAQ;AAArC,OAAeA,EAAE,CAACC,EAAlB;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFkC,CAAP,EAExB,CAACX,MAAD,CAFwB,CAA5B;AAIA,sBACI,QAAC,IAAD;AAAA,4BACI,QAAC,IAAD,CAAM,KAAN;AACI,MAAA,IAAI,EAAC,OADT;AAEI,MAAA,KAAK,EAAC,sBAFV;AAGI,MAAA,KAAK,EAAEH,OAAO,CAACe,KAHnB;AAII,MAAA,QAAQ,EAAE,CAAC;AAAEK,QAAAA;AAAF,OAAD,KAAgBlB,UAAU,CAACX,gBAAgB,CAAC6B,MAAM,CAACC,KAAR,CAAjB;AAJxC;AAAA;AAAA;AAAA;AAAA,YADJ,EAOKF,YAPL,eAQI;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI,QAAC,IAAD,CAAM,MAAN;AACI,QAAA,SAAS,EAAC,UADd;AAEI,QAAA,KAAK,EAAC,OAFV;AAGI,QAAA,IAAI,EAAC,QAHT;AAII,QAAA,OAAO,EAAET,QAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH,CA9CD;;GAAMZ,W;;KAAAA,W;AAgDN,eAAeA,WAAf","sourcesContent":["import React, { useContext, useState, useEffect, useCallback, useMemo } from \"react\";\nimport { AppContext } from \"../context/AppContext\";\nimport {\n    dispatchReset,\n    dispatchSetTitle,\n    EditFormsContext,\n} from \"../context/EditFormsContext\";\nimport Question from \"./Question\";\nimport { Form } from \"semantic-ui-react\";\nimport { genFormsList } from \"../utils/utils\";\nimport { postForms, putForms } from \"../utils/data\";\n\nconst FormsEditor = () => {\n    const { state } = useContext(AppContext);\n    const { state: stateEF, dispatch: dispatchEF } = useContext(EditFormsContext);\n\n    const [idList, setIdList] = useState([]);\n\n    useEffect(() => {\n        setIdList(genFormsList(state.metrics, Array.from(stateEF.selectedDir)));\n    }, [state, stateEF.selectedDir.size]);\n\n    const onSubmit = async () => {\n        const idListFiltered = idList.map(el => el.id)\n        if (stateEF.id) {\n            await putForms(stateEF.id, stateEF.title, idListFiltered);\n        } else {\n            await postForms(stateEF.title, idListFiltered);\n        }\n\n        window.location.reload();\n    };\n\n    const questionList = useMemo(() => idList.map((el) => {\n        return <Question key={el.id} q={el} disabled />;\n    }), [idList])\n\n    return (\n        <Form>\n            <Form.Input\n                name=\"title\"\n                label=\"Nome do fomulÃ¡rio\"\n                value={stateEF.title}\n                onChange={({ target }) => dispatchEF(dispatchSetTitle(target.value))}\n            />\n            {questionList}\n            <div className='app-footer'>\n                <Form.Button\n                    className=\"centered\"\n                    color=\"black\"\n                    type=\"submit\"\n                    onClick={onSubmit}\n                >\n                    Enviar\n                </Form.Button>\n            </div>\n        </Form>\n    );\n};\n\nexport default FormsEditor;\n"]},"metadata":{},"sourceType":"module"}