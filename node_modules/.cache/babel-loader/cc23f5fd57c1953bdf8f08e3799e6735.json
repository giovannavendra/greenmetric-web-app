{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/pages/CreateDashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Segment, Container, Form, Breadcrumb, Message } from \"semantic-ui-react\";\nimport { createDashboard } from '../api/score';\nimport { kebabCase } from '../utils/utils';\nimport { useForm } from 'react-hook-form';\nimport urls from \"../utils/urls\";\n\nconst CreateDashboard = () => {\n  _s();\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    errors\n  } = useForm();\n  const errorMessages = Object.values(errors).map(e => e.message);\n  const hasError = errorMessages.length > 0;\n  const [loading, setLoading] = useState(false);\n  const [redirect, setRedirect] = useState(false);\n\n  const handleNameChange = e => {\n    const value = e.target.value;\n    setValue('id', kebabCase(value));\n  };\n\n  const submitForm = ({\n    id,\n    name\n  }) => {\n    setLoading(true);\n    createDashboard(id, name).then(() => {\n      setLoading(false);\n      setRedirect(`${urls.dashboardDetails}/${id}`);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [redirect && /*#__PURE__*/_jsxDEV(Redirect, {\n      to: redirect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Segment.Group, {\n      children: [/*#__PURE__*/_jsxDEV(Segment, {\n        children: /*#__PURE__*/_jsxDEV(Breadcrumb, {\n          size: \"massive\",\n          children: [/*#__PURE__*/_jsxDEV(Breadcrumb.Section, {\n            href: urls.dashboards,\n            children: \"Pain\\xE9is\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Breadcrumb.Divider, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Breadcrumb.Section, {\n            active: true,\n            children: \"Criar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Segment, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          onSubmit: handleSubmit(submitForm),\n          error: hasError,\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            widths: \"equal\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n              disabled: loading,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"name\",\n                children: \"Nome\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 44,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"name\",\n                name: \"name\",\n                onChange: handleNameChange,\n                ref: register({\n                  required: 'O campo Nome é obrigatório'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 43,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n              disabled: loading,\n              required: true,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"id\",\n                children: \"ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 48,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                id: \"id\",\n                name: \"id\",\n                ref: register({\n                  required: 'O campo ID é obrigatório'\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 49,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this), hasError && /*#__PURE__*/_jsxDEV(Message, {\n            error: true,\n            list: errorMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 26\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            children: [/*#__PURE__*/_jsxDEV(Form.Button, {\n              primary: true,\n              loading: loading,\n              children: \"Salvar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 54,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Form.Button, {\n              negative: true,\n              disabled: loading,\n              onClick: () => setRedirect(true),\n              children: \"Cancelar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CreateDashboard, \"+7zKISvH65INlnuwr4zvHL0pSn0=\", false, function () {\n  return [useForm];\n});\n\n_c = CreateDashboard;\nexport default CreateDashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateDashboard\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/pages/CreateDashboard.jsx"],"names":["React","useState","Redirect","Segment","Container","Form","Breadcrumb","Message","createDashboard","kebabCase","useForm","urls","CreateDashboard","register","handleSubmit","setValue","errors","errorMessages","Object","values","map","e","message","hasError","length","loading","setLoading","redirect","setRedirect","handleNameChange","value","target","submitForm","id","name","then","dashboardDetails","dashboards","required"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { Segment, Container, Form, Breadcrumb, Message } from \"semantic-ui-react\";\nimport { createDashboard } from '../api/score';\nimport { kebabCase } from '../utils/utils';\nimport { useForm } from 'react-hook-form';\nimport urls from \"../utils/urls\";\n\nconst CreateDashboard = () => {\n  const { register, handleSubmit, setValue, errors } = useForm();\n  const errorMessages = Object.values(errors).map(e => e.message);\n  const hasError = errorMessages.length > 0;\n  const [loading, setLoading] = useState(false);\n  const [redirect, setRedirect] = useState(false);\n\n  const handleNameChange = e => {\n    const value = e.target.value;\n    setValue('id', kebabCase(value));\n  };\n\n  const submitForm = ({ id, name }) => {\n    setLoading(true);\n    createDashboard(id, name).then(() => {\n      setLoading(false);\n      setRedirect(`${urls.dashboardDetails}/${id}`);\n    })\n  };\n\n  return (\n    <Container>\n      { redirect && <Redirect to={redirect} />}\n      <Segment.Group>\n        <Segment>\n          <Breadcrumb size=\"massive\">\n            <Breadcrumb.Section href={urls.dashboards} >Painéis</Breadcrumb.Section>\n            <Breadcrumb.Divider />\n            <Breadcrumb.Section active>Criar</Breadcrumb.Section>\n          </Breadcrumb>\n        </Segment>\n        <Segment>\n          <Form onSubmit={handleSubmit(submitForm)} error={hasError}>\n            <Form.Group widths=\"equal\">\n            <Form.Field disabled={loading} required>\n              <label htmlFor=\"name\">Nome</label>\n              <input id=\"name\" name=\"name\" onChange={handleNameChange} ref={register({ required: 'O campo Nome é obrigatório' })} />\n            </Form.Field>\n            <Form.Field disabled={loading} required>\n              <label htmlFor=\"id\">ID</label>\n              <input id=\"id\" name=\"id\" ref={register({ required: 'O campo ID é obrigatório' })} />\n            </Form.Field>\n            </Form.Group>\n            {hasError && <Message error list={errorMessages} />}\n            <Form.Group>\n              <Form.Button primary loading={loading}>Salvar</Form.Button>\n              <Form.Button negative disabled={loading} onClick={() => setRedirect(true)}>Cancelar</Form.Button>\n            </Form.Group>\n          </Form>\n        </Segment>\n      </Segment.Group>\n    </Container>\n  );\n}\n\nexport default CreateDashboard;\n"]},"metadata":{},"sourceType":"module"}