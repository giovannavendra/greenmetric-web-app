{"ast":null,"code":"export const toDirectory = (dir, pathSplitted, data) => {\n  var _dir$children;\n\n  if (pathSplitted.length === 0) return {\n    name: data.id.split(\"/\").slice(-1)[0],\n    data\n  };\n  const findChild = (_dir$children = dir.children) === null || _dir$children === void 0 ? void 0 : _dir$children.find(el => el.name === pathSplitted[0]);\n  const newEl = toDirectory(findChild ? findChild : {\n    name: pathSplitted[0],\n    children: []\n  }, pathSplitted.slice(1), data);\n  if (!findChild) dir.children.push(newEl);else dir.children.splice(dir.children.indexOf(findChild), 1, newEl);\n  return dir;\n};\nexport const metricsArrToDir = (arr, dir) => {\n  for (let el of arr) toDirectory(dir, el.id.split(\"/\"), el);\n\n  return dir;\n};\nexport const parseSelect = options => {\n  return options.map(el => ({\n    key: el.split(\" \")[0],\n    text: el,\n    value: el\n  }));\n};\nexport const genFormsList = (metrics = [], selectedDir = []) => {\n  const newMetrics = metrics.map(el => {\n    return { ...el,\n      id: el.id.slice(-1) === \"/\" ? el.id : `${el.id}/`\n    };\n  });\n  const newSelectedDir = selectedDir.map(el => `${el}/`);\n  return newSelectedDir.reduce((acc, id) => acc.concat(newMetrics.map(q => q.id.includes(id) && !!!acc.find(el => el === q.id.slice(0, -1)) ? { ...q,\n    id: q.id.slice(0, -1)\n  } : null)), []).filter(el => el);\n};","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/utils/utils.js"],"names":["toDirectory","dir","pathSplitted","data","length","name","id","split","slice","findChild","children","find","el","newEl","push","splice","indexOf","metricsArrToDir","arr","parseSelect","options","map","key","text","value","genFormsList","metrics","selectedDir","newMetrics","newSelectedDir","reduce","acc","concat","q","includes","filter"],"mappings":"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","sourcesContent":["export const toDirectory = (dir, pathSplitted, data) => {\n    if (pathSplitted.length === 0)\n        return {\n            name: data.id.split(\"/\").slice(-1)[0],\n            data,\n        };\n\n    const findChild = dir.children?.find((el) => el.name === pathSplitted[0]);\n    const newEl = toDirectory(\n        findChild ? findChild : { name: pathSplitted[0], children: [] },\n        pathSplitted.slice(1),\n        data\n    );\n    if (!findChild) dir.children.push(newEl);\n    else dir.children.splice(dir.children.indexOf(findChild), 1, newEl);\n\n    return dir;\n};\n\nexport const metricsArrToDir = (arr, dir) => {\n    for (let el of arr) toDirectory(dir, el.id.split(\"/\"), el);\n    return dir;\n};\n\nexport const parseSelect = (options) => {\n    return options.map((el) => ({\n        key: el.split(\" \")[0],\n        text: el,\n        value: el,\n    }));\n};\n\nexport const genFormsList = (metrics = [], selectedDir = []) => {\n    const newMetrics = metrics.map((el) => {\n        return { ...el, id: el.id.slice(-1) === \"/\" ? el.id : `${el.id}/` };\n    });\n    const newSelectedDir = selectedDir.map((el) => `${el}/`);\n\n    return newSelectedDir.reduce(\n        (acc, id) => acc.concat(newMetrics.map((q) =>\n            q.id.includes(id) && !!!acc.find((el) => el === q.id.slice(0, -1))\n                ? { ...q, id: q.id.slice(0, -1) }\n                : null\n        )), []).filter(el => el);\n};\n"]},"metadata":{},"sourceType":"module"}