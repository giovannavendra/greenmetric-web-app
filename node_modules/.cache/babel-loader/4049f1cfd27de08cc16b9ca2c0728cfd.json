{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/MetricScore.jsx\";\nimport React from 'react';\nimport { List, Header, Grid } from 'semantic-ui-react';\n\nconst MetricScore = ({\n  score,\n  short\n}) => {\n  const fullView = true && !short;\n  const calculated = score.ranges.find(item => item.checked);\n  const value = score.points * calculated.multiplier;\n  const scoreColor = value == score.points ? \"green\" : value == 0 ? \"red\" : \"yellow\";\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    centered: true,\n    columns: 2,\n    divided: true,\n    children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n      verticalAlign: \"middle\",\n      children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          content: `(${score.code}) ${score.name}`,\n          as: \"h4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: score.ranges.map((item, i) => (fullView || item.checked) && /*#__PURE__*/_jsxDEV(List.Item, {\n            active: item.checked,\n            style: {\n              padding: 5,\n              backgroundColor: item.checked ? scoreColor : \"none\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(List.Content, {\n              floated: \"right\",\n              children: [\"x \", item.multiplier]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 25,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(List.Content, {\n              children: [/*#__PURE__*/_jsxDEV(List.Icon, {\n                name: item.checked ? \"dot circle outline\" : \"circle outline\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 19\n              }, this), item.label]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 26,\n              columnNumber: 17\n            }, this)]\n          }, `${score.code}-range-${i}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 17,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n        textAlign: \"center\",\n        width: 3,\n        children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n          centered: true,\n          children: /*#__PURE__*/_jsxDEV(Header, {\n            size: \"huge\",\n            color: scoreColor,\n            content: value,\n            subheader: `/ ${score.points}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n\n_c = MetricScore;\nexport default MetricScore;\n\nvar _c;\n\n$RefreshReg$(_c, \"MetricScore\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/MetricScore.jsx"],"names":["React","List","Header","Grid","MetricScore","score","short","fullView","calculated","ranges","find","item","checked","value","points","multiplier","scoreColor","code","name","map","i","padding","backgroundColor","label"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,IAAvB,QAAmC,mBAAnC;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAsB;AACxC,QAAMC,QAAQ,GAAG,QAAQ,CAACD,KAA1B;AACA,QAAME,UAAU,GAAGH,KAAK,CAACI,MAAN,CAAaC,IAAb,CAAkBC,IAAI,IAAIA,IAAI,CAACC,OAA/B,CAAnB;AACA,QAAMC,KAAK,GAAGR,KAAK,CAACS,MAAN,GAAeN,UAAU,CAACO,UAAxC;AACA,QAAMC,UAAU,GAAGH,KAAK,IAAIR,KAAK,CAACS,MAAf,GAAwB,OAAxB,GAAkCD,KAAK,IAAI,CAAT,GAAa,KAAb,GAAqB,QAA1E;AAEA,sBACE,QAAC,IAAD;AAAM,IAAA,QAAQ,MAAd;AAAe,IAAA,OAAO,EAAE,CAAxB;AAA2B,IAAA,OAAO,MAAlC;AAAA,2BACE,QAAC,IAAD,CAAM,GAAN;AAAU,MAAA,aAAa,EAAC,QAAxB;AAAA,8BACE,QAAC,IAAD,CAAM,MAAN;AAAA,gCACE,QAAC,MAAD;AAAQ,UAAA,OAAO,EAAG,IAAGR,KAAK,CAACY,IAAK,KAAIZ,KAAK,CAACa,IAAK,EAA/C;AAAkD,UAAA,EAAE,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,IAAD;AAAA,oBACGb,KAAK,CAACI,MAAN,CAAaU,GAAb,CAAiB,CAACR,IAAD,EAAOS,CAAP,KAAc,CAACb,QAAQ,IAAII,IAAI,CAACC,OAAlB,kBAC9B,QAAC,IAAD,CAAM,IAAN;AAEE,YAAA,MAAM,EAAED,IAAI,CAACC,OAFf;AAGE,YAAA,KAAK,EAAE;AACLS,cAAAA,OAAO,EAAE,CADJ;AAELC,cAAAA,eAAe,EAAEX,IAAI,CAACC,OAAL,GAAeI,UAAf,GAA4B;AAFxC,aAHT;AAAA,oCAQE,QAAC,IAAD,CAAM,OAAN;AAAc,cAAA,OAAO,EAAC,OAAtB;AAAA,+BAAiCL,IAAI,CAACI,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,oBARF,eASE,QAAC,IAAD,CAAM,OAAN;AAAA,sCACE,QAAC,IAAD,CAAM,IAAN;AAAW,gBAAA,IAAI,EAAEJ,IAAI,CAACC,OAAL,GAAe,oBAAf,GAAsC;AAAvD;AAAA;AAAA;AAAA;AAAA,sBADF,EAC8ED,IAAI,CAACY,KADnF;AAAA;AAAA;AAAA;AAAA;AAAA,oBATF;AAAA,aACQ,GAAElB,KAAK,CAACY,IAAK,UAASG,CAAE,EADhC;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAqBE,QAAC,IAAD,CAAM,MAAN;AAAa,QAAA,SAAS,EAAC,QAAvB;AAAgC,QAAA,KAAK,EAAE,CAAvC;AAAA,+BACE,QAAC,IAAD,CAAM,GAAN;AAAU,UAAA,QAAQ,MAAlB;AAAA,iCACE,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,MAAb;AACE,YAAA,KAAK,EAAEJ,UADT;AAEE,YAAA,OAAO,EAAEH,KAFX;AAGE,YAAA,SAAS,EAAG,KAAIR,KAAK,CAACS,MAAO;AAH/B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cArBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CAzCD;;KAAMV,W;AA4CN,eAAeA,WAAf","sourcesContent":["import React from 'react';\nimport { List, Header, Grid } from 'semantic-ui-react';\n\nconst MetricScore = ({ score, short }) => {\n  const fullView = true && !short;\n  const calculated = score.ranges.find(item => item.checked);\n  const value = score.points * calculated.multiplier;\n  const scoreColor = value == score.points ? \"green\" : value == 0 ? \"red\" : \"yellow\";\n\n  return (\n    <Grid centered columns={2} divided>\n      <Grid.Row verticalAlign=\"middle\">\n        <Grid.Column>\n          <Header content={`(${score.code}) ${score.name}`} as=\"h4\" />\n          <List>\n            {score.ranges.map((item, i) => ((fullView || item.checked) &&\n              <List.Item\n                key={`${score.code}-range-${i}`}\n                active={item.checked}\n                style={{\n                  padding: 5,\n                  backgroundColor: item.checked ? scoreColor : \"none\"\n                }}\n              >\n                <List.Content floated='right'>x {item.multiplier}</List.Content>\n                <List.Content>\n                  <List.Icon name={item.checked ? \"dot circle outline\" : \"circle outline\"} />{item.label}\n                </List.Content>\n              </List.Item>\n            ))}\n          </List>\n        </Grid.Column>\n        <Grid.Column textAlign=\"center\" width={3}>\n          <Grid.Row centered>\n            <Header size=\"huge\"\n              color={scoreColor}\n              content={value}\n              subheader={`/ ${score.points}`}\n            />\n          </Grid.Row>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n}\n\n\nexport default MetricScore;\n"]},"metadata":{},"sourceType":"module"}