{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/MetricsEditor.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\";\nimport { array, object, string } from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Form, Checkbox, Message } from 'semantic-ui-react';\nimport { getMetricbyId, putMetric, postMetric } from '../utils/data';\nimport { getScore, createScore, updateScore } from '../api/score';\nimport ScoreEditor from '../components/ScoreEditor';\nconst validationSchema = object().shape({\n  id: string().required('O campo ID deve ser preenchido'),\n  valueType: string().required('O campo Tipo deve ser preenchido'),\n  title: string().required('O campo Título deve ser preenchido'),\n  hasData: string().required('O campo Resposta deve ser preenchido'),\n  evidenceRequirement: string().required('O campo Evidência deve ser preenchido'),\n  unit: string().optional(),\n  dependencies: string().optional(),\n  description: string().optional(),\n  expression: string().optional(),\n  options: array().of(object().shape({\n    value: string().required('O texto da opção deve ser preenchido.')\n  })).when('valueType', {\n    is: 'SELECT',\n    then: array().required('O campo Opções requer pelo menos uma opção definida.')\n  })\n});\nconst typesOptions = [{\n  key: '1',\n  text: 'Inteiro',\n  value: 'INTEGER'\n}, {\n  key: '2',\n  text: 'Real',\n  value: 'FLOAT'\n}, {\n  key: '3',\n  text: 'Opções',\n  value: 'SELECT'\n}];\nconst hasDataOptions = [{\n  key: '1',\n  text: 'Sim',\n  value: true\n}, {\n  key: '2',\n  text: 'Não',\n  value: false\n}];\nconst evidenceRequirementOptions = [{\n  key: '1',\n  text: 'Nenhuma evidência',\n  value: 'NONE'\n}, {\n  key: '2',\n  text: 'Evidência opcional',\n  value: 'OPTIONAL'\n}, {\n  key: '3',\n  text: 'Evidência obrigatória',\n  value: 'REQUIRED'\n}];\nconst emptyScore = {\n  name: '',\n  code: '',\n  points: 0,\n  ranges: []\n};\nconst defaultState = {\n  dependencies: '',\n  description: '',\n  evidenceRequirement: '',\n  expression: '',\n  hasData: '',\n  id: '',\n  title: '',\n  unit: '',\n  valueType: '',\n  options: [{\n    value: ''\n  }],\n  score: { ...emptyScore\n  }\n};\n\nconst MetricsEditor = ({\n  id\n}) => {\n  _s();\n\n  const {\n    control,\n    watch,\n    reset,\n    handleSubmit,\n    errors\n  } = useForm({\n    resolver: yupResolver(validationSchema),\n    defaultValues: defaultState\n  });\n  const [originalMetric, setRetrieved] = useState(defaultState);\n  const [isNewMetric, setIsNewMetric] = useState(true);\n  const [isNewScore, setIsNewScore] = useState(true);\n  const optionsFieldArray = useFieldArray({\n    control: control,\n    name: \"options\"\n  });\n  const valueType = watch('valueType');\n  const options = watch('options');\n  useEffect(() => {\n    if (!id) return;\n    getMetricbyId(id).then(metricResponse => {\n      var _metricResponse$data, _metricResponse$data$, _metricResponse$data$2;\n\n      const metricData = {\n        data: metricResponse.data.data,\n        dependencies: metricResponse.data.dependencies || '',\n        description: metricResponse.data.description || '',\n        evidenceRequirement: metricResponse.data.evidenceRequirement || '',\n        hasData: metricResponse.data.hasData == null ? '' : metricResponse.data.hasData,\n        id: metricResponse.data.id || '',\n        title: metricResponse.data.title || '',\n        valueType: metricResponse.data.valueType || '',\n        unit: metricResponse.data.unit || '',\n        expression: metricResponse.data.expression || '',\n        score: { ...emptyScore\n        },\n        options: (metricResponse === null || metricResponse === void 0 ? void 0 : (_metricResponse$data = metricResponse.data) === null || _metricResponse$data === void 0 ? void 0 : (_metricResponse$data$ = _metricResponse$data.data) === null || _metricResponse$data$ === void 0 ? void 0 : (_metricResponse$data$2 = _metricResponse$data$.options) === null || _metricResponse$data$2 === void 0 ? void 0 : _metricResponse$data$2.map(opt => ({\n          value: opt\n        }))) || []\n      };\n      getScore(id).then(scoreResponse => {\n        const scoreData = {\n          score: { ...scoreResponse.data\n          }\n        };\n        reset({ ...metricData,\n          ...scoreData\n        });\n        setIsNewScore(false);\n      }).catch(() => {\n        reset({ ...metricData,\n          score: { ...emptyScore\n          }\n        });\n        setIsNewScore(true);\n      }).finally(() => {\n        setIsNewMetric(false);\n        setRetrieved(metricData);\n      });\n    }).catch(e => {\n      setIsNewMetric(true);\n      setIsNewScore(true);\n      reset({ ...defaultState,\n        id: id + '/'\n      });\n    });\n  }, [id]);\n\n  const parseData = (type, data, options) => {\n    if (type == \"INTEGER\") {\n      return parseInt(data);\n    }\n\n    if (type == \"FLOAT\") {\n      return parseFloat(data);\n    }\n\n    if (type == \"SELECT\") {\n      return { ...data,\n        options\n      };\n    }\n\n    return undefined;\n  };\n\n  const onSubmit = ({\n    score,\n    options,\n    ...metric\n  }) => {\n    const processedOptions = (options === null || options === void 0 ? void 0 : options.map(el => el.value)) || [];\n    const mustInitializeData = !originalMetric.data || originalMetric.valueType !== metric.valueType;\n    const defaultData = valueType === 'SELECT' ? {\n      currentOption: processedOptions[0],\n      options: processedOptions\n    } : '';\n    const shouldSendScore = score.name != '';\n    const submitMetric = { ...metric,\n      data: mustInitializeData ? defaultData : parseData(originalMetric.valueType, originalMetric.data, processedOptions)\n    };\n    score.ranges = score.ranges || [];\n    Promise.all([isNewMetric ? postMetric(submitMetric) : putMetric(submitMetric), shouldSendScore && (isNewScore ? createScore({\n      metricId: metric.id,\n      ...score\n    }) : updateScore(metric.id, score))]).then(() => {\n      window.location.reload();\n    }).catch(e => {\n      console.log(e);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: handleSubmit(onSubmit),\n    error: Object.values(errors).length > 0,\n    children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n      children: /*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: !isNewMetric,\n        label: 'Atualizar ID',\n        onChange: (e, {\n          checked\n        }) => {\n          setIsNewMetric(!checked);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsxDEV(Controller, {\n        control: control,\n        name: \"valueType\",\n        render: ({\n          onChange,\n          value\n        }) => {\n          var _errors$valueType;\n\n          return /*#__PURE__*/_jsxDEV(Form.Select, {\n            onChange: (_, p) => onChange(p.value),\n            value: value,\n            options: typesOptions,\n            placeholder: \"Tipo\",\n            label: \"Tipo\",\n            error: (_errors$valueType = errors.valueType) === null || _errors$valueType === void 0 ? void 0 : _errors$valueType.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 21\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        control: control,\n        name: \"hasData\",\n        render: ({\n          onChange,\n          value\n        }) => {\n          var _errors$hasData;\n\n          return /*#__PURE__*/_jsxDEV(Form.Select, {\n            onChange: (_, p) => onChange(p.value),\n            value: value,\n            options: hasDataOptions,\n            placeholder: \"O campo \\xE9 edit\\xE1vel?\",\n            label: \"Resposta\",\n            error: (_errors$hasData = errors.hasData) === null || _errors$hasData === void 0 ? void 0 : _errors$hasData.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 21\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsxDEV(Controller, {\n        control: control,\n        name: \"evidenceRequirement\",\n        render: ({\n          onChange,\n          value\n        }) => {\n          var _errors$evidenceRequi;\n\n          return /*#__PURE__*/_jsxDEV(Form.Select, {\n            onChange: (_, p) => onChange(p.value),\n            value: value,\n            options: evidenceRequirementOptions,\n            placeholder: \"O campo possui evid\\xEAncia?\",\n            label: \"Evid\\xEAncia\",\n            error: (_errors$evidenceRequi = errors.evidenceRequirement) === null || _errors$evidenceRequi === void 0 ? void 0 : _errors$evidenceRequi.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 21\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        control: control,\n        name: \"unit\",\n        render: ({\n          onChange,\n          value\n        }) => {\n          var _errors$unit;\n\n          return /*#__PURE__*/_jsxDEV(Form.Input, {\n            onChange: (_, p) => onChange(p.value),\n            value: value,\n            label: \"Unidade\",\n            placeholder: \"Ex: m\\xB2, %\",\n            error: (_errors$unit = errors.unit) === null || _errors$unit === void 0 ? void 0 : _errors$unit.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 21\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsxDEV(Controller, {\n        control: control,\n        name: \"id\",\n        render: ({\n          onChange,\n          value\n        }) => {\n          var _errors$id;\n\n          return /*#__PURE__*/_jsxDEV(Form.Input, {\n            disabled: !isNewMetric,\n            onChange: (_, p) => onChange(p.value),\n            value: value,\n            label: \"ID\",\n            placeholder: \"Valor \\xFAnico de identifica\\xE7\\xE3o da m\\xE9trica no banco de dados\",\n            error: (_errors$id = errors.id) === null || _errors$id === void 0 ? void 0 : _errors$id.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 21\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controller, {\n        control: control,\n        name: \"title\",\n        render: ({\n          onChange,\n          value\n        }) => {\n          var _errors$title;\n\n          return /*#__PURE__*/_jsxDEV(Form.Input, {\n            onChange: (_, p) => onChange(p.value),\n            value: value,\n            label: \"T\\xEDtulo\",\n            placeholder: \"Nome da m\\xE9trica\",\n            error: (_errors$title = errors.title) === null || _errors$title === void 0 ? void 0 : _errors$title.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 21\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Controller, {\n      control: control,\n      name: \"description\",\n      render: ({\n        onChange,\n        value\n      }) => {\n        var _errors$description;\n\n        return /*#__PURE__*/_jsxDEV(Form.TextArea, {\n          onChange: (_, p) => onChange(p.value),\n          value: value,\n          label: \"Descri\\xE7\\xE3o\",\n          placeholder: \"Descreva em palavras como calcular esta m\\xE9trica\",\n          name: \"description\",\n          error: (_errors$description = errors.description) === null || _errors$description === void 0 ? void 0 : _errors$description.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 17\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Controller, {\n      control: control,\n      name: \"expression\",\n      render: ({\n        onChange,\n        value\n      }) => {\n        var _errors$expression;\n\n        return /*#__PURE__*/_jsxDEV(Form.Input, {\n          onChange: (_, p) => onChange(p.value),\n          value: value,\n          label: \"Express\\xE3o\",\n          placeholder: \"F\\xF3rmula matem\\xE1tica para calcular a m\\xE9trica\",\n          error: (_errors$expression = errors.expression) === null || _errors$expression === void 0 ? void 0 : _errors$expression.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 17\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this), valueType === 'SELECT' && /*#__PURE__*/_jsxDEV(Form.Field, {\n      width: 4,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Op\\xE7\\xF5es\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Button, {\n          color: \"green\",\n          type: \"button\",\n          onClick: () => optionsFieldArray.append({\n            value: ''\n          }),\n          children: \"Adicionar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Button, {\n          disabled: optionsFieldArray.fields.length == 0,\n          color: \"red\",\n          type: \"button\",\n          onClick: () => optionsFieldArray.remove(optionsFieldArray.fields.length - 1),\n          children: \"Remover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 21\n      }, this), errors.options && /*#__PURE__*/_jsxDEV(Message, {\n        error: true,\n        content: errors.options.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 40\n      }, this), optionsFieldArray.fields.map((option, index) => /*#__PURE__*/_jsxDEV(Controller, {\n        name: `options[${index}].value`,\n        control: control,\n        defaultValue: option.value,\n        render: ({\n          onChange,\n          name,\n          value\n        }) => {\n          var _errors$options$index, _errors$options$index2;\n\n          return /*#__PURE__*/_jsxDEV(Form.Input, {\n            onChange: (_, p) => onChange(p.value),\n            name: name,\n            value: value,\n            placeholder: `Opção ${index + 1}`,\n            error: errors.options && ((_errors$options$index = errors.options[index]) === null || _errors$options$index === void 0 ? void 0 : (_errors$options$index2 = _errors$options$index.value) === null || _errors$options$index2 === void 0 ? void 0 : _errors$options$index2.message)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 29\n          }, this);\n        }\n      }, option.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(ScoreEditor, {\n      control: control,\n      isSelect: valueType == \"SELECT\",\n      options: options && options.map(el => ({\n        text: el.value,\n        value: el.value\n      }))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-footer\",\n      children: /*#__PURE__*/_jsxDEV(Form.Button, {\n        primary: true,\n        className: \"centered\",\n        color: \"black\",\n        type: \"submit\",\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 156,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MetricsEditor, \"4pvEjNKjhwdLz4OFUYzrwq24/Rg=\", false, function () {\n  return [useForm, useFieldArray];\n});\n\n_c = MetricsEditor;\nexport default MetricsEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"MetricsEditor\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/MetricsEditor.jsx"],"names":["React","useEffect","useState","useForm","useFieldArray","Controller","array","object","string","yupResolver","Form","Checkbox","Message","getMetricbyId","putMetric","postMetric","getScore","createScore","updateScore","ScoreEditor","validationSchema","shape","id","required","valueType","title","hasData","evidenceRequirement","unit","optional","dependencies","description","expression","options","of","value","when","is","then","typesOptions","key","text","hasDataOptions","evidenceRequirementOptions","emptyScore","name","code","points","ranges","defaultState","score","MetricsEditor","control","watch","reset","handleSubmit","errors","resolver","defaultValues","originalMetric","setRetrieved","isNewMetric","setIsNewMetric","isNewScore","setIsNewScore","optionsFieldArray","metricResponse","metricData","data","map","opt","scoreResponse","scoreData","catch","finally","e","parseData","type","parseInt","parseFloat","undefined","onSubmit","metric","processedOptions","el","mustInitializeData","defaultData","currentOption","shouldSendScore","submitMetric","Promise","all","metricId","window","location","reload","console","log","Object","values","length","checked","onChange","_","p","message","append","fields","remove","option","index"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useForm, useFieldArray, Controller } from \"react-hook-form\";\nimport { array, object, string } from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Form, Checkbox, Message, } from 'semantic-ui-react';\nimport { getMetricbyId, putMetric, postMetric } from '../utils/data';\nimport { getScore, createScore, updateScore } from '../api/score';\nimport ScoreEditor from '../components/ScoreEditor';\n\nconst validationSchema = object().shape({\n  id: string().required('O campo ID deve ser preenchido'),\n  valueType: string().required('O campo Tipo deve ser preenchido'),\n  title: string().required('O campo Título deve ser preenchido'),\n  hasData: string().required('O campo Resposta deve ser preenchido'),\n  evidenceRequirement: string().required('O campo Evidência deve ser preenchido'),\n  unit: string().optional(),\n  dependencies: string().optional(),\n  description: string().optional(),\n  expression: string().optional(),\n  options: array().of(object().shape({value: string().required('O texto da opção deve ser preenchido.')})).when('valueType', {\n    is: 'SELECT',\n    then: array().required('O campo Opções requer pelo menos uma opção definida.'),\n  }),\n});\n\nconst typesOptions = [\n    { key: '1', text: 'Inteiro', value: 'INTEGER' },\n    { key: '2', text: 'Real', value: 'FLOAT' },\n    { key: '3', text: 'Opções', value: 'SELECT' },\n];\n\nconst hasDataOptions = [\n    { key: '1', text: 'Sim', value: true },\n    { key: '2', text: 'Não', value: false },\n]\n\nconst evidenceRequirementOptions = [\n    { key: '1', text: 'Nenhuma evidência', value: 'NONE' },\n    { key: '2', text: 'Evidência opcional', value: 'OPTIONAL' },\n    { key: '3', text: 'Evidência obrigatória', value: 'REQUIRED' },\n];\n\nconst emptyScore = {\n    name: '',\n    code: '',\n    points: 0,\n    ranges: [],\n};\n\nconst defaultState = {\n    dependencies: '',\n    description: '',\n    evidenceRequirement: '',\n    expression: '',\n    hasData: '',\n    id: '',\n    title: '',\n    unit: '',\n    valueType: '',\n    options: [{ value: '' }],\n    score: { ...emptyScore },\n};\n\nconst MetricsEditor = ({ id }) => {\n    const { control, watch, reset, handleSubmit, errors } = useForm({\n        resolver: yupResolver(validationSchema),\n        defaultValues: defaultState,\n    });\n    const [originalMetric, setRetrieved] = useState(defaultState);\n    const [isNewMetric, setIsNewMetric] = useState(true);\n    const [isNewScore, setIsNewScore] = useState(true);\n    const optionsFieldArray = useFieldArray({\n        control: control,\n        name: \"options\",\n    });\n    const valueType = watch('valueType');\n    const options = watch('options');\n\n    useEffect(() => {\n        if (!id) return;\n\n        getMetricbyId(id)\n            .then(metricResponse => {\n                const metricData = {\n                    data: metricResponse.data.data,\n                    dependencies: metricResponse.data.dependencies || '',\n                    description: metricResponse.data.description || '',\n                    evidenceRequirement: metricResponse.data.evidenceRequirement || '',\n                    hasData: metricResponse.data.hasData == null ? '' : metricResponse.data.hasData,\n                    id: metricResponse.data.id || '',\n                    title: metricResponse.data.title || '',\n                    valueType: metricResponse.data.valueType || '',\n                    unit: metricResponse.data.unit || '',\n                    expression: metricResponse.data.expression || '',\n                    score: { ...emptyScore },\n                    options: metricResponse?.data?.data?.options?.map(opt => ({ value: opt })) || [],\n                };\n                getScore(id)\n                    .then(scoreResponse => {\n                        const scoreData = { score: { ...scoreResponse.data } };\n                        reset({ ...metricData, ...scoreData });\n                        setIsNewScore(false);\n                    }).catch(() => {\n                        reset({ ...metricData, score: { ...emptyScore } });\n                        setIsNewScore(true);\n                    })\n                    .finally(() => {\n                        setIsNewMetric(false);\n                        setRetrieved(metricData);\n                    });\n            })\n            .catch(e => {\n                setIsNewMetric(true);\n                setIsNewScore(true);\n                reset({ ...defaultState, id: id + '/' });\n            })\n    }, [id]);\n\n    const parseData = (type, data, options) => {\n        if (type == \"INTEGER\") {\n            return parseInt(data);\n        }\n        if (type == \"FLOAT\") {\n            return parseFloat(data);\n        }\n        if (type == \"SELECT\") {\n            return { ...data, options };\n        }\n\n        return undefined;\n    };\n\n    const onSubmit = ({ score, options, ...metric }) => {\n        const processedOptions = options?.map(el => el.value) || [];\n        const mustInitializeData = !originalMetric.data || originalMetric.valueType !== metric.valueType;\n        const defaultData = valueType === 'SELECT' ? { currentOption: processedOptions[0], options: processedOptions } : '';\n        const shouldSendScore = score.name != '';\n\n        const submitMetric = {\n            ...metric,\n            data: mustInitializeData ? defaultData : parseData(originalMetric.valueType, originalMetric.data, processedOptions),\n        };\n\n        score.ranges = score.ranges || [];\n        Promise.all([\n            isNewMetric ? postMetric(submitMetric) : putMetric(submitMetric),\n            shouldSendScore && (isNewScore ? createScore({ metricId: metric.id, ...score }) : updateScore(metric.id, score)),\n        ]).then(() => {\n            window.location.reload();\n        }).catch(e => {\n            console.log(e);\n        })\n    }\n\n    return (\n        <Form onSubmit={handleSubmit(onSubmit)} error={Object.values(errors).length > 0}>\n            <Form.Field>\n                <Checkbox\n                    checked={!isNewMetric}\n                    label={'Atualizar ID'}\n                    onChange={(e, { checked }) => { setIsNewMetric(!checked) }} />\n            </Form.Field>\n            <Form.Group widths='equal'>\n                <Controller control={control} name=\"valueType\" render={({ onChange, value }) => (\n                    <Form.Select\n                        onChange={(_, p) => onChange(p.value)}\n                        value={value}\n                        options={typesOptions}\n                        placeholder='Tipo'\n                        label='Tipo'\n                        error={errors.valueType?.message}\n                    />\n                )} />\n                <Controller control={control} name=\"hasData\" render={({ onChange, value }) => (\n                    <Form.Select\n                        onChange={(_, p) => onChange(p.value)}\n                        value={value}\n                        options={hasDataOptions}\n                        placeholder='O campo é editável?'\n                        label='Resposta'\n                        error={errors.hasData?.message}\n                    />\n                )} />\n            </Form.Group>\n            <Form.Group widths='equal'>\n                <Controller control={control} name=\"evidenceRequirement\" render={({ onChange, value }) => (\n                    <Form.Select\n                        onChange={(_, p) => onChange(p.value)}\n                        value={value}\n                        options={evidenceRequirementOptions}\n                        placeholder='O campo possui evidência?'\n                        label='Evidência'\n                        error={errors.evidenceRequirement?.message}\n                    />\n                )} />\n                <Controller control={control} name=\"unit\" render={({ onChange, value }) => (\n                    <Form.Input\n                        onChange={(_, p) => onChange(p.value)}\n                        value={value}\n                        label=\"Unidade\"\n                        placeholder=\"Ex: m², %\"\n                        error={errors.unit?.message}\n                    />\n                )} />\n            </Form.Group>\n            <Form.Group widths='equal'>\n                <Controller control={control} name=\"id\" render={({ onChange, value }) => (\n                    <Form.Input\n                        disabled={!isNewMetric}\n                        onChange={(_, p) => onChange(p.value)}\n                        value={value}\n                        label=\"ID\"\n                        placeholder=\"Valor único de identificação da métrica no banco de dados\"\n                        error={errors.id?.message}\n                    />\n                )} />\n                <Controller control={control} name=\"title\" render={({ onChange, value }) => (\n                    <Form.Input\n                        onChange={(_, p) => onChange(p.value)}\n                        value={value}\n                        label=\"Título\"\n                        placeholder=\"Nome da métrica\"\n                        error={errors.title?.message}\n                    />\n                )} />\n            </Form.Group>\n            <Controller control={control} name=\"description\" render={({ onChange, value }) => (\n                <Form.TextArea\n                    onChange={(_, p) => onChange(p.value)}\n                    value={value}\n                    label=\"Descrição\"\n                    placeholder=\"Descreva em palavras como calcular esta métrica\"\n                    name='description'\n                    error={errors.description?.message}\n                />\n            )} />\n            <Controller control={control} name=\"expression\" render={({ onChange, value }) => (\n                <Form.Input\n                    onChange={(_, p) => onChange(p.value)}\n                    value={value}\n                    label=\"Expressão\"\n                    placeholder=\"Fórmula matemática para calcular a métrica\"\n                    error={errors.expression?.message}\n                />\n            )} />\n            {valueType === 'SELECT' &&\n                <Form.Field width={4}>\n                    <label>Opções</label>\n                    <Form.Group>\n                        <Form.Button\n                            color='green'\n                            type='button'\n                            onClick={() => optionsFieldArray.append({value: ''})}>\n                            Adicionar\n                        </Form.Button>\n                        <Form.Button\n                            disabled={optionsFieldArray.fields.length == 0}\n                            color='red'\n                            type='button'\n                            onClick={() => optionsFieldArray.remove(optionsFieldArray.fields.length - 1)}>\n                            Remover\n                        </Form.Button>\n                    </Form.Group>\n                    {errors.options && <Message error content={errors.options.message} />}\n                    {optionsFieldArray.fields.map((option, index) => (\n                        <Controller name={`options[${index}].value`} control={control} defaultValue={option.value} key={option.id} render={({ onChange, name, value }) => (\n                            <Form.Input\n                                onChange={(_, p) => onChange(p.value)}\n                                name={name}\n                                value={value}\n                                placeholder={`Opção ${index + 1}`}\n                                error={errors.options && errors.options[index]?.value?.message}\n                            />\n                        )} />\n                    ))}\n                </Form.Field>\n            }\n            <ScoreEditor control={control} isSelect={valueType == \"SELECT\"} options={options && options.map(el => ({text: el.value, value: el.value}))} />\n            <div className='app-footer'>\n                <Form.Button\n                    primary\n                    className=\"centered\"\n                    color='black'\n                    type='submit'>Enviar</Form.Button>\n            </div>\n        </Form>\n    )\n}\n\nexport default MetricsEditor"]},"metadata":{},"sourceType":"module"}