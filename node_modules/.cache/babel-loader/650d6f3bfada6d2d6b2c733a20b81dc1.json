{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/Question.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from \"react\";\nimport { parseSelect } from \"../utils/utils\";\nimport { Form, Button } from \"semantic-ui-react\";\n\nconst Question = ({\n  q,\n  disabled,\n  onChangeSelect,\n  onChangeInput\n}) => {\n  _s();\n\n  var _q$data;\n\n  const inputImg = useRef(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: `${q.id}. ${q.title} ${q.code ? `(${q.code})` : \"\"}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: q.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), ((_q$data = q.data) === null || _q$data === void 0 ? void 0 : _q$data.hasOwnProperty(\"options\")) ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Form.Select, {\n        disabled: disabled,\n        name: q.id,\n        options: parseSelect(q.data.options),\n        value: q.data.currentOption,\n        onChange: !disabled && onChangeSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 11\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Form.Group, {\n        widths: \"equal\",\n        children: [q.hasData && /*#__PURE__*/_jsxDEV(Form.Input, {\n          disabled: disabled,\n          label: \"Valor\",\n          name: q.id,\n          value: q.data,\n          onChange: !disabled && onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n          label: \"Valor Computado\",\n          disabled: true,\n          name: q.id,\n          value: q.value,\n          onChange: onChangeInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this)\n    }, void 0, false), q.evidence !== \"NONE\" && /*#__PURE__*/_jsxDEV(\"div\", {\n      name: \"evidence\",\n      style: {\n        justifyContent: q.evidence === \"REQUIRED\" ? \"space-between\" : \"flex-end\"\n      },\n      children: [q.evidence === \"REQUIRED\" && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Evid\\xEAncia Obrigat\\xF3ria*\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        icon: \"archive\",\n        content: \"Anexar Evid\\xEAncia\",\n        className: \"secondary-button\",\n        onClick: () => inputImg.current.click()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: inputImg,\n        type: \"file\",\n        multiple: true,\n        className: \"hidden\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Question, \"uavpv6Q9gJiN1lM9BDMzuLSNkfM=\");\n\n_c = Question;\nexport default Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/Question.jsx"],"names":["React","useRef","parseSelect","Form","Button","Question","q","disabled","onChangeSelect","onChangeInput","inputImg","id","title","code","description","data","hasOwnProperty","options","currentOption","hasData","value","evidence","justifyContent","current","click"],"mappings":"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","sourcesContent":["import React, { useRef } from \"react\";\nimport { parseSelect } from \"../utils/utils\";\nimport { Form, Button } from \"semantic-ui-react\";\n\nconst Question = ({ q, disabled, onChangeSelect, onChangeInput }) => {\n  const inputImg = useRef(null);\n\n  return (\n    <div className=\"question\">\n      <h4>{`${q.id}. ${q.title} ${q.code ? `(${q.code})` : \"\"}`}</h4>\n      <p>{q.description}</p>\n      {q.data?.hasOwnProperty(\"options\") ? (\n        <>\n          <Form.Select\n            disabled={disabled}\n            name={q.id}\n            options={parseSelect(q.data.options)}\n            value={q.data.currentOption}\n            onChange={!disabled && onChangeSelect}\n          />\n        </>\n      ) : (\n        <>\n          <Form.Group widths=\"equal\">\n            {q.hasData && (\n              <Form.Input\n                disabled={disabled}\n                label=\"Valor\"\n                name={q.id}\n                value={q.data}\n                onChange={!disabled && onChangeInput}\n              />\n            )}\n            <Form.Input\n              label=\"Valor Computado\"\n              disabled\n              name={q.id}\n              value={q.value}\n              onChange={onChangeInput}\n            />\n          </Form.Group>\n        </>\n      )}\n      {q.evidence !== \"NONE\" && (\n        <div\n          name=\"evidence\"\n          style={{\n            justifyContent:\n              q.evidence === \"REQUIRED\" ? \"space-between\" : \"flex-end\",\n          }}\n        >\n          {q.evidence === \"REQUIRED\" && <p>Evidência Obrigatória*</p>}\n          <Button\n            icon=\"archive\"\n            content=\"Anexar Evidência\"\n            className=\"secondary-button\"\n            onClick={() => inputImg.current.click()}\n          />\n          <input ref={inputImg} type=\"file\" multiple className=\"hidden\" />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Question;\n"]},"metadata":{},"sourceType":"module"}