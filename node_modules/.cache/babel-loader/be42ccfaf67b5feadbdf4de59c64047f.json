{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/FormsList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { getForms } from \"../utils/data\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { EditFormsContext, defaultEditFormsContext, dispatchSetId, dispatchSetTitle, dispatchAddDir, dispatchSetEdit, dispatchReset } from \"../context/EditFormsContext\";\n\nconst FormsList = () => {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(EditFormsContext);\n  const [formsList, setFormsList] = useState([]);\n\n  const fetchData = async () => {\n    const {\n      data\n    } = await getForms();\n    setFormsList(data);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const editForms = forms => {\n    if (!forms) {\n      dispatch(dispatchReset());\n    } else {\n      dispatch(dispatchSetId(forms.id));\n      dispatch(dispatchSetTitle(forms.title));\n      forms.metrics.map(metric => dispatch(dispatchAddDir(metric)));\n    }\n\n    dispatch(dispatchSetEdit(true));\n  };\n\n  const deleteForms = forms => {};\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forms-list \",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Gerenciar Formul\\xE1rios\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), formsList.map(forms => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forms-card bordered\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flx-r-sb\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: forms.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Icon, {\n            name: \"pencil\",\n            size: \"large\",\n            className: \"clickable\",\n            onClick: () => editForms(forms)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Icon, {\n            name: \"close\",\n            size: \"large\",\n            className: \"clickable\",\n            onClick: () => deleteForms(forms)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), forms.metrics.map(metric => /*#__PURE__*/_jsxDEV(\"span\", {\n        children: metric\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        icon: \"add\",\n        content: \"Criar novo formul\\xE1rio\",\n        basic: true,\n        color: \"black\",\n        onClick: () => editForms()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n_s(FormsList, \"NWf5+KJy5Jw/xPo94JmvQxYifZw=\");\n\n_c = FormsList;\nexport default FormsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormsList\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/FormsList.jsx"],"names":["React","useState","useEffect","useContext","getForms","Button","Icon","EditFormsContext","defaultEditFormsContext","dispatchSetId","dispatchSetTitle","dispatchAddDir","dispatchSetEdit","dispatchReset","FormsList","state","dispatch","formsList","setFormsList","fetchData","data","editForms","forms","id","title","metrics","map","metric","deleteForms"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { getForms } from \"../utils/data\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport {\n  EditFormsContext,\n  defaultEditFormsContext,\n  dispatchSetId,\n  dispatchSetTitle,\n  dispatchAddDir,\n  dispatchSetEdit,\n  dispatchReset,\n} from \"../context/EditFormsContext\";\n\nconst FormsList = () => {\n  const { state, dispatch } = useContext(EditFormsContext);\n\n  const [formsList, setFormsList] = useState([]);\n\n  const fetchData = async () => {\n    const { data } = await getForms();\n    setFormsList(data);\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const editForms = (forms) => {\n    if (!forms) {\n      dispatch(dispatchReset());\n    } else {\n      dispatch(dispatchSetId(forms.id));\n      dispatch(dispatchSetTitle(forms.title));\n      forms.metrics.map((metric) => dispatch(dispatchAddDir(metric)));\n    }\n\n    dispatch(dispatchSetEdit(true));\n  };\n\n  const deleteForms = (forms) => {};\n\n  return (\n    <div className=\"forms-list \">\n      <h1>Gerenciar Formulários</h1>\n      {formsList.map((forms) => (\n        <div className={\"forms-card bordered\"}>\n          <div className=\"flx-r-sb\">\n            <h3>{forms.title}</h3>\n            <div>\n              <Icon\n                name=\"pencil\"\n                size=\"large\"\n                className=\"clickable\"\n                onClick={() => editForms(forms)}\n              />\n              <Icon\n                name=\"close\"\n                size=\"large\"\n                className=\"clickable\"\n                onClick={() => deleteForms(forms)}\n              />\n            </div>\n          </div>\n          {forms.metrics.map((metric) => (\n            <span>{metric}</span>\n          ))}\n        </div>\n      ))}\n      <div className=\"centered\">\n        <Button\n          icon=\"add\"\n          content=\"Criar novo formulário\"\n          basic\n          color=\"black\"\n          onClick={() => editForms()}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default FormsList;\n"]},"metadata":{},"sourceType":"module"}