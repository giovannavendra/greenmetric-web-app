{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/CategoryScore.jsx\";\nimport React from 'react';\nimport { PieChart } from 'react-minimal-pie-chart';\nimport { Container, Grid, Header } from 'semantic-ui-react';\nimport CategoryScoreLabel from './CategoryScoreLabel';\nimport MetricScore from './MetricScore';\n\nconst CategoryScore = ({\n  data\n}) => {\n  const {\n    category,\n    value,\n    total,\n    metricResults\n  } = data;\n  const score = {\n    value,\n    color: category.color || \"green\"\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      content: `${category.name} [${category.weight}%]`,\n      color: category.color,\n      style: {\n        display: \"inline-block\",\n        marginRight: 15\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      padded: true,\n      style: {\n        height: 300\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n        columns: 3,\n        verticalAlign: \"middle\",\n        children: [/*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 6,\n          children: /*#__PURE__*/_jsxDEV(Grid.Row, {\n            centered: true,\n            verticalAlign: \"middle\",\n            children: /*#__PURE__*/_jsxDEV(PieChart, {\n              rounded: true,\n              lineWidth: \"20\",\n              animate: true,\n              data: [score],\n              totalValue: total,\n              label: props => /*#__PURE__*/_jsxDEV(CategoryScoreLabel, { ...props,\n                color: category.color,\n                header: value,\n                subheader: `/ ${total}`\n              }, category.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 27,\n                columnNumber: 35\n              }, this),\n              labelPosition: 0,\n              background: \"#bfbfbf\",\n              lengthAngle: 270,\n              startAngle: 135,\n              viewBoxSize: [100, 87],\n              style: {\n                maxWidth: 250\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 21,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid.Column, {\n          width: 10,\n          style: {\n            maxHeight: 300,\n            overflowY: 'auto'\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            stackable: true,\n            divided: \"vertically\",\n            children: metricResults.map(score => /*#__PURE__*/_jsxDEV(Grid.Row, {\n              children: /*#__PURE__*/_jsxDEV(MetricScore, {\n                score: score\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 41,\n                columnNumber: 19\n              }, this)\n            }, score.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 38,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\n_c = CategoryScore;\nexport default CategoryScore;\n\nvar _c;\n\n$RefreshReg$(_c, \"CategoryScore\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/CategoryScore.jsx"],"names":["React","PieChart","Container","Grid","Header","CategoryScoreLabel","MetricScore","CategoryScore","data","category","value","total","metricResults","score","color","name","weight","display","marginRight","height","props","id","maxWidth","maxHeight","overflowY","map","code"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { PieChart } from 'react-minimal-pie-chart';\nimport { Container, Grid, Header } from 'semantic-ui-react';\nimport CategoryScoreLabel from './CategoryScoreLabel';\nimport MetricScore from './MetricScore';\n\nconst CategoryScore = ({ data }) => {\n  const { category, value, total, metricResults } = data;\n  const score = {\n    value,\n    color: category.color || \"green\",\n  };\n\n  return (\n    <Container>\n      <Header content={`${category.name} [${category.weight}%]`} color={category.color} style={{ display: \"inline-block\", marginRight: 15 }} />\n      <Grid padded style={{ height: 300 }}>\n        <Grid.Row columns={3} verticalAlign=\"middle\">\n          <Grid.Column width={6}>\n            <Grid.Row centered verticalAlign=\"middle\">\n              <PieChart\n                rounded\n                lineWidth=\"20\"\n                animate\n                data={[score]}\n                totalValue={total}\n                label={(props) => <CategoryScoreLabel key={category.id} {...props} color={category.color} header={value} subheader={`/ ${total}`} />}\n                labelPosition={0}\n                background=\"#bfbfbf\"\n                lengthAngle={270}\n                startAngle={135}\n                viewBoxSize={[100, 87]}\n                style={{ maxWidth: 250 }}\n              />\n            </Grid.Row>\n          </Grid.Column>\n          <Grid.Column width={10} style={{ maxHeight: 300, overflowY: 'auto' }}>\n            <Grid stackable divided=\"vertically\">\n              {metricResults.map(score => (\n                <Grid.Row key={score.code}>\n                  <MetricScore score={score} />\n                </Grid.Row>\n              ))}\n            </Grid>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Container>\n  );\n};\n\nexport default CategoryScore;\n"]},"metadata":{},"sourceType":"module"}