{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/FormsList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { getForms } from \"../utils/data\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport { EditFormsContext, defaultEditFormsContext, dispatchSetId, dispatchSetTitle, dispatchAddDir, dispatchSetEdit, dispatchReset } from \"../context/EditFormsContext\";\n\nconst FormsList = () => {\n  _s();\n\n  const {\n    state,\n    dispatch\n  } = useContext(EditFormsContext);\n  const [formsList, setFormsList] = useState([]);\n  useEffect(() => {\n    const fetchData = async () => {\n      const {\n        data\n      } = await getForms();\n      setFormsList(data);\n    };\n\n    fetchData();\n  }, []);\n\n  const editForms = forms => {\n    dispatch(dispatchReset());\n\n    if (forms) {\n      dispatch(dispatchSetId(forms.id));\n      dispatch(dispatchSetTitle(forms.title));\n      forms.metrics.map(metric => dispatch(dispatchAddDir(metric)));\n    }\n\n    dispatch(dispatchSetEdit(true));\n  };\n\n  const updateToken = formsId => {};\n\n  const deleteForms = forms => {};\n\n  const [copySuccess, setCopySuccess] = useState('');\n  const textAreaRef = useRef(null);\n\n  function copyToClipboard(e) {\n    textAreaRef.current.select();\n    document.execCommand('copy'); // This is just personal preference.\n    // I prefer to not show the whole text area selected.\n\n    e.target.focus();\n    setCopySuccess('Copied!');\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"forms-list \",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Gerenciar Formul\\xE1rios\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this), formsList.map(forms => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"forms-card bordered\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flx-r-sb\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: forms.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 29\n          }, this), forms.metrics.map(metric => /*#__PURE__*/_jsxDEV(\"span\", {\n            children: metric\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"forms-card-actions\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forms-card-actions-icons\",\n            children: [/*#__PURE__*/_jsxDEV(Icon, {\n              name: \"pencil\",\n              size: \"large\",\n              className: \"clickable\",\n              onClick: () => editForms(forms)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Icon, {\n              name: \"close\",\n              size: \"large\",\n              className: \"clickable\",\n              onClick: () => deleteForms(forms)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"forms-card-actions-access_token\",\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              children: [\"Token de Acesso:\", /*#__PURE__*/_jsxDEV(\"textarea\", {\n                ref: textAreaRef,\n                value: forms.accessToken\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  border: 'none'\n                },\n                onClick: copyToClipboard,\n                children: /*#__PURE__*/_jsxDEV(Icon, {\n                  color: \"blue\",\n                  name: \"copy\",\n                  size: \"large\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 95,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"blue\",\n              onClick: () => updateToken(forms.id),\n              children: \"Atualizar\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }, this)\n    }, forms.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"centered\",\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        icon: \"add\",\n        content: \"Criar novo formul\\xE1rio\",\n        basic: true,\n        color: \"blue\",\n        onClick: () => editForms()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n};\n\n_s(FormsList, \"CAKoe7sT+oo/KUQ9cs/AMsrOF6k=\");\n\n_c = FormsList;\nexport default FormsList;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormsList\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/FormsList.jsx"],"names":["React","useState","useEffect","useContext","getForms","Button","Icon","EditFormsContext","defaultEditFormsContext","dispatchSetId","dispatchSetTitle","dispatchAddDir","dispatchSetEdit","dispatchReset","FormsList","state","dispatch","formsList","setFormsList","fetchData","data","editForms","forms","id","title","metrics","map","metric","updateToken","formsId","deleteForms","copySuccess","setCopySuccess","textAreaRef","useRef","copyToClipboard","e","current","select","document","execCommand","target","focus","accessToken","border"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from \"react\";\nimport { getForms } from \"../utils/data\";\nimport { Button, Icon } from \"semantic-ui-react\";\nimport {\n    EditFormsContext,\n    defaultEditFormsContext,\n    dispatchSetId,\n    dispatchSetTitle,\n    dispatchAddDir,\n    dispatchSetEdit,\n    dispatchReset,\n} from \"../context/EditFormsContext\";\n\nconst FormsList = () => {\n\n    const { state, dispatch } = useContext(EditFormsContext);\n\n    const [formsList, setFormsList] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            const { data } = await getForms();\n            setFormsList(data);\n        };\n\n        fetchData();\n    }, []);\n\n    const editForms = (forms) => {\n        dispatch(dispatchReset());\n        if (forms) {\n            dispatch(dispatchSetId(forms.id));\n            dispatch(dispatchSetTitle(forms.title));\n            forms.metrics.map((metric) => dispatch(dispatchAddDir(metric)));\n        }\n\n        dispatch(dispatchSetEdit(true));\n    };\n\n    const updateToken = (formsId) => {\n\n    }\n\n    const deleteForms = (forms) => {\n\n    };\n\n    const [copySuccess, setCopySuccess] = useState('');\n    const textAreaRef = useRef(null);\n\n    function copyToClipboard(e) {\n        textAreaRef.current.select();\n        document.execCommand('copy');\n        // This is just personal preference.\n        // I prefer to not show the whole text area selected.\n        e.target.focus();\n        setCopySuccess('Copied!');\n    };\n\n    return (\n        <div className=\"forms-list \">\n            <h1>Gerenciar Formulários</h1>\n            {formsList.map((forms) => (\n                <div key={forms.id} className={\"forms-card bordered\"}>\n                    <div className=\"flx-r-sb\">\n                        <div>\n                            <h3>{forms.title}</h3>\n                            {forms.metrics.map((metric) => (\n                                <span>{metric}</span>\n                            ))}\n                        </div>\n                        <div className='forms-card-actions'>\n                            <div className='forms-card-actions-icons'>\n                                <Icon\n                                    name=\"pencil\"\n                                    size=\"large\"\n                                    className=\"clickable\"\n                                    onClick={() => editForms(forms)}\n                                />\n                                <Icon\n                                    name=\"close\"\n                                    size=\"large\"\n                                    className=\"clickable\"\n                                    onClick={() => deleteForms(forms)}\n                                />\n                            </div>\n                            <div className='forms-card-actions-access_token'>\n                                <span>\n                                    Token de Acesso: \n                                    <textarea\n                                        ref={textAreaRef}\n                                        value={forms.accessToken}\n                                    /> \n                                    <button style={{border: 'none'}} onClick={copyToClipboard}>\n                                    <Icon color='blue' name='copy' size='large'/> \n                                    </button>\n                                    \n                                </span>\n                                <Button color='blue' onClick={() => updateToken(forms.id)}>Atualizar</Button>\n                            </div>\n                        </div>\n                    </div>\n\n                </div>\n            ))}\n            <div className=\"centered\">\n                <Button\n                    icon=\"add\"\n                    content=\"Criar novo formulário\"\n                    basic\n                    color=\"blue\"\n                    onClick={() => editForms()}\n                />\n            </div>\n        </div>\n    );\n};\n\nexport default FormsList;\n"]},"metadata":{},"sourceType":"module"}