{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/pages/PageEditMetric.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport ContextMenu from '../components/ContextMenu';\nimport MetricsEditor from '../components/MetricsEditor';\nimport NavigationSidebar from '../components/NavigationSidebar';\nimport { deleteDirectory, copyDiretory } from '../utils/data';\nimport { Form, Modal, Button } from 'semantic-ui-react';\n\nconst PageEditMetric = ({}) => {\n  _s();\n\n  const [id, setId] = useState(null);\n  const [open, setOpen] = useState(false);\n  const [copyName, setCopyName] = useState(null);\n  const [srcName, setSrcName] = useState(null);\n\n  const editMetric = (e, id, showMenu) => {\n    e.stopPropagation();\n    setId(id);\n    showMenu(false);\n  };\n\n  const deleteDir = async (e, id, showMenu) => {\n    e.stopPropagation();\n    await deleteDirectory(id);\n    showMenu(false);\n    window.location.reload();\n  };\n\n  const copyDirModal = async (e, id, showMenu) => {\n    e.stopPropagation();\n    setSrcName(id);\n    setCopyName(`${id}.copy`);\n    setOpen(true);\n    showMenu(false);\n  };\n\n  const copyDir = async () => {\n    try {\n      await copyDiretory(copyName, srcName);\n    } catch (e) {\n      console.log(e);\n    } finally {\n      window.location.reload();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"sidebar-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Modal, {\n        onClose: () => setOpen(false),\n        onOpen: () => setOpen(true),\n        open: open,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          children: \"Escolha um nome para o novo diret\\xF3rio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Content, {\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(Form.Input, {\n              value: copyName,\n              onChange: ({\n                target\n              }) => {\n                setCopyName(target.value);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Actions, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"black\",\n            onClick: () => setOpen(false),\n            children: \"Cancelar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => copyDir(),\n            children: \"Copiar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ContextMenu, {\n        triggersList: [\".metric\", \".directory\"],\n        children: ({\n          target,\n          setShowMenu\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [(target === null || target === void 0 ? void 0 : target.classList.contains(\"directory\")) && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"clickable\",\n              onClick: e => editMetric(e, target === null || target === void 0 ? void 0 : target.id, setShowMenu),\n              children: [\"Adicionar m\\xE9trica ao diret\\xF3rio \", target === null || target === void 0 ? void 0 : target.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"clickable\",\n              onClick: e => deleteDir(e, target === null || target === void 0 ? void 0 : target.id, setShowMenu),\n              children: [\"Deletar diret\\xF3rio \", target === null || target === void 0 ? void 0 : target.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"clickable\",\n              onClick: e => copyDirModal(e, target === null || target === void 0 ? void 0 : target.id, setShowMenu),\n              children: [\"Copiar diret\\xF3rio \", target === null || target === void 0 ? void 0 : target.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this), (target === null || target === void 0 ? void 0 : target.classList.contains(\"metric\")) && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"clickable\",\n              onClick: e => editMetric(e, target === null || target === void 0 ? void 0 : target.id, setShowMenu),\n              children: [\"Editar m\\xE9trica \", target === null || target === void 0 ? void 0 : target.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"clickable\",\n              onClick: e => deleteDir(e, target === null || target === void 0 ? void 0 : target.id, setShowMenu),\n              children: [\"Deletar m\\xE9trica \", target === null || target === void 0 ? void 0 : target.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"clickable\",\n              onClick: e => copyDirModal(e, target === null || target === void 0 ? void 0 : target.id, setShowMenu),\n              children: [\"Copiar m\\xE9trica \", target === null || target === void 0 ? void 0 : target.id]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(NavigationSidebar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(MetricsEditor, {\n      id: id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PageEditMetric, \"28i9nsprQxDkw2e0Jtb12TKKtXU=\");\n\n_c = PageEditMetric;\nexport default PageEditMetric;\n\nvar _c;\n\n$RefreshReg$(_c, \"PageEditMetric\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/pages/PageEditMetric.jsx"],"names":["React","useEffect","useState","ContextMenu","MetricsEditor","NavigationSidebar","deleteDirectory","copyDiretory","Form","Modal","Button","PageEditMetric","id","setId","open","setOpen","copyName","setCopyName","srcName","setSrcName","editMetric","e","showMenu","stopPropagation","deleteDir","window","location","reload","copyDirModal","copyDir","console","log","target","value","setShowMenu","classList","contains"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport ContextMenu from '../components/ContextMenu'\nimport MetricsEditor from '../components/MetricsEditor'\nimport NavigationSidebar from '../components/NavigationSidebar'\nimport { deleteDirectory, copyDiretory } from '../utils/data'\nimport { Form, Modal, Button } from 'semantic-ui-react'\n\nconst PageEditMetric = ({ }) => {\n    const [id, setId] = useState(null)\n    const [open, setOpen] = useState(false)\n    const [copyName, setCopyName] = useState(null)\n    const [srcName, setSrcName] = useState(null)\n\n    const editMetric = (e, id, showMenu) => {\n        e.stopPropagation();\n        setId(id)\n        showMenu(false)\n    }\n\n    const deleteDir = async (e, id, showMenu) => {\n        e.stopPropagation();\n        await deleteDirectory(id)\n        showMenu(false)\n        window.location.reload()\n    }\n\n    const copyDirModal = async (e, id, showMenu) => {\n        e.stopPropagation();\n        setSrcName(id)\n        setCopyName(`${id}.copy`)\n        setOpen(true)\n        showMenu(false)\n    }\n\n    const copyDir = async () => {\n        try {\n            await copyDiretory(copyName, srcName);\n        } catch (e) {\n            console.log(e)\n        } finally {\n            window.location.reload()\n        }\n    }\n\n    return (\n        <div className='sidebar-page'>\n            <div>\n                <Modal\n                    onClose={() => setOpen(false)}\n                    onOpen={() => setOpen(true)}\n                    open={open}\n                >\n                    <Modal.Header>Escolha um nome para o novo diretório</Modal.Header>\n                    <Modal.Content >\n                        <Form>\n                            <Form.Input\n                                value={copyName}\n                                onChange={({ target }) => { setCopyName(target.value) }}\n                            />\n                        </Form>\n                    </Modal.Content>\n                    <Modal.Actions>\n                        <Button color='black' onClick={() => setOpen(false)}>\n                            Cancelar\n                        </Button>\n                        <Button onClick={() => copyDir()}>\n                            Copiar\n                        </Button>\n                    </Modal.Actions>\n                </Modal>\n                <ContextMenu triggersList={[\".metric\", \".directory\"]}>\n                    {({ target, setShowMenu }) =>\n                        <div>\n                            {target?.classList.contains(\"directory\") && (\n                                <div>\n                                    <p className=\"clickable\" onClick={(e) => editMetric(e, target?.id, setShowMenu)}>\n                                        Adicionar métrica ao diretório {target?.id}\n                                    </p>\n                                    <p className=\"clickable\" onClick={(e) => deleteDir(e, target?.id, setShowMenu)}>\n                                        Deletar diretório {target?.id}\n                                    </p>\n                                    <p className=\"clickable\" onClick={(e) => copyDirModal(e, target?.id, setShowMenu)}>\n                                        Copiar diretório {target?.id}\n                                    </p>\n                                </div>\n                            )}\n                            {target?.classList.contains(\"metric\") && (\n                                <div>\n                                    <p className=\"clickable\" onClick={(e) => editMetric(e, target?.id, setShowMenu)}>\n                                        Editar métrica {target?.id}\n                                    </p>\n                                    <p className=\"clickable\" onClick={(e) => deleteDir(e, target?.id, setShowMenu)}>\n                                        Deletar métrica {target?.id}\n                                    </p>\n                                    <p className=\"clickable\" onClick={(e) => copyDirModal(e, target?.id, setShowMenu)}>\n                                        Copiar métrica {target?.id}\n                                    </p>\n                                </div>\n                            )}\n                        </div>\n                    }\n                </ContextMenu>\n                <NavigationSidebar />\n            </div>\n            <MetricsEditor id={id} />\n            <div></div>\n        </div>\n    )\n}\n\nexport default PageEditMetric"]},"metadata":{},"sourceType":"module"}