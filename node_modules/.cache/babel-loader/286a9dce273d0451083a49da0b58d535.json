{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/MetricsEditor.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Form, Checkbox } from 'semantic-ui-react';\nimport { getMetricbyId, putMetric, postMetric } from '../utils/data';\nconst typesOptions = [{\n  key: '1',\n  text: 'Inteiro',\n  value: 'INTEGER'\n}, {\n  key: '2',\n  text: 'Real',\n  value: 'FLOAT'\n}, {\n  key: '3',\n  text: 'Opções',\n  value: 'SELECT'\n}];\nconst hasDataOptions = [{\n  key: '1',\n  text: 'Sim',\n  value: true\n}, {\n  key: '2',\n  text: 'Não',\n  value: false\n}];\nconst evidenceRequirementOptions = [{\n  key: '1',\n  text: 'Nenhuma evidência',\n  value: 'NONE'\n}, {\n  key: '2',\n  text: 'Evidência opcional',\n  value: 'OPTIONAL'\n}, {\n  key: '3',\n  text: 'Evidência obrigatória',\n  value: 'REQUIRED'\n}];\nconst defaultState = {\n  valueType: '',\n  hasData: '',\n  evidenceRequirement: '',\n  unit: '',\n  id: '',\n  title: '',\n  description: '',\n  code: '',\n  expression: '',\n  dependencies: ''\n};\n\nconst MetricsEditor = ({\n  id\n}) => {\n  _s();\n\n  const [info, setInfo] = useState({ ...defaultState\n  });\n  const [isNewMetric, setIsNewMetric] = useState(true);\n  const [options, setOptions] = useState([]);\n  useEffect(() => {\n    const fetchData = async id => {\n      if (!id) return;\n\n      try {\n        const {\n          data\n        } = await getMetricbyId(id);\n        setIsNewMetric(!!!data);\n        setInfo(data);\n      } catch {\n        setIsNewMetric(true);\n        setInfo({ ...defaultState,\n          id: `${id}/`\n        });\n      }\n    };\n\n    fetchData(id);\n  }, [id]);\n\n  const handleChange = (name, value) => {\n    setInfo({ ...info,\n      [name]: value\n    });\n  }; // TODO, it makes the metric always be a SELECT\n\n\n  const onSubmit = async () => {\n    const data = info.valueType === 'SELECT' ? {\n      currentOption: options[0],\n      options: options\n    } : '';\n    const submitInfo = { ...info,\n      data\n    };\n\n    try {\n      if (isNewMetric) await postMetric(submitInfo);else await putMetric(submitInfo);\n      window.location.reload();\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const addOption = () => {\n    setOptions([...options, '']);\n  };\n\n  const removeOption = () => {\n    setOptions(options.slice(0, -1));\n  };\n\n  const handleChangeOption = (index, value) => {\n    const newOptions = [...options];\n    newOptions[index] = value;\n    setOptions(newOptions);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: onSubmit,\n    children: [/*#__PURE__*/_jsxDEV(Form.Field, {\n      children: /*#__PURE__*/_jsxDEV(Checkbox, {\n        checked: !isNewMetric,\n        label: 'Atualizar ID',\n        onChange: (e, {\n          checked\n        }) => {\n          setIsNewMetric(!checked);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Select, {\n        options: typesOptions,\n        placeholder: \"Tipo\",\n        label: \"Tipo\",\n        name: \"valueType\",\n        value: info.valueType,\n        onChange: (e, {\n          name,\n          value\n        }) => handleChange(name, value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Select, {\n        options: hasDataOptions,\n        placeholder: \"O campo \\xE9 edit\\xE1vel?\",\n        label: \"Dados\",\n        name: \"hasData\",\n        value: info.hasData,\n        onChange: (e, {\n          name,\n          value\n        }) => handleChange(name, value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Select, {\n        options: evidenceRequirementOptions,\n        placeholder: \"O campo possui evid\\xEAncia?\",\n        label: \"Evid\\xEAncia\",\n        name: \"evidenceRequirement\",\n        value: info.evidenceRequirement,\n        onChange: (e, {\n          name,\n          value\n        }) => handleChange(name, value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"Unidade\",\n        placeholder: \"Ex: m\\xB2, %\",\n        name: \"unit\",\n        value: info.unit,\n        onChange: ({\n          target\n        }) => handleChange(target.name, target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      widths: \"equal\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Input, {\n        disabled: !isNewMetric,\n        label: \"ID\",\n        placeholder: \"Valor \\xFAnico de identifica\\xE7\\xE3o da m\\xE9trica no banco de dados\",\n        name: \"id\",\n        value: info.id,\n        onChange: ({\n          target\n        }) => handleChange(target.name, target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n        label: \"T\\xEDtulo\",\n        placeholder: \"Nome da m\\xE9trica\",\n        name: \"title\",\n        value: info.title,\n        onChange: ({\n          target\n        }) => handleChange(target.name, target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.TextArea, {\n      label: \"Descri\\xE7\\xE3o\",\n      placeholder: \"Descreva em palavras como calcular esta m\\xE9trica\",\n      name: \"description\",\n      value: info.description,\n      onChange: ({\n        target\n      }) => handleChange(target.name, target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n      label: \"Code\",\n      placeholder: \"Valor usado para cria\\xE7\\xE3o do dashboard\",\n      name: \"code\",\n      value: info.code,\n      onChange: ({\n        target\n      }) => handleChange(target.name, target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n      label: \"Express\\xE3o\",\n      placeholder: \"F\\xF3rmula matem\\xE1tica para calcular a m\\xE9trica\",\n      name: \"expression\",\n      value: info.expression,\n      onChange: ({\n        target\n      }) => handleChange(target.name, target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), info.valueType === 'SELECT' && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Op\\xE7\\xF5es\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 21\n      }, this), options.map((el, index) => /*#__PURE__*/_jsxDEV(Form.Input, {\n        placeholder: \"Op\\xE7\\xE3o 1\",\n        name: \"options\",\n        value: el.value,\n        onChange: ({\n          target\n        }) => handleChangeOption(index, target.value)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 25\n      }, this)), /*#__PURE__*/_jsxDEV(Form.Group, {\n        children: [/*#__PURE__*/_jsxDEV(Form.Button, {\n          color: \"green\",\n          type: \"button\",\n          onClick: () => {\n            addOption();\n          },\n          children: \"Adicionar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Form.Button, {\n          color: \"red\",\n          type: \"button\",\n          onClick: () => {\n            removeOption();\n          },\n          children: \"Remover\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-footer\",\n      children: /*#__PURE__*/_jsxDEV(Form.Button, {\n        primary: true,\n        className: \"centered\",\n        color: \"black\",\n        type: \"submit\",\n        children: \"Enviar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MetricsEditor, \"+DW5JxlzWqRQfKWGPHtg1WqVPuY=\");\n\n_c = MetricsEditor;\nexport default MetricsEditor;\n\nvar _c;\n\n$RefreshReg$(_c, \"MetricsEditor\");","map":{"version":3,"sources":["/Users/giovanna/Documents/MC855/green-metric/web-app/src/components/MetricsEditor.jsx"],"names":["React","useEffect","useState","Form","Checkbox","getMetricbyId","putMetric","postMetric","typesOptions","key","text","value","hasDataOptions","evidenceRequirementOptions","defaultState","valueType","hasData","evidenceRequirement","unit","id","title","description","code","expression","dependencies","MetricsEditor","info","setInfo","isNewMetric","setIsNewMetric","options","setOptions","fetchData","data","handleChange","name","onSubmit","currentOption","submitInfo","window","location","reload","e","console","log","addOption","removeOption","slice","handleChangeOption","index","newOptions","checked","target","map","el"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, Checkbox } from 'semantic-ui-react'\nimport { getMetricbyId, putMetric, postMetric } from '../utils/data'\n\nconst typesOptions = [\n    { key: '1', text: 'Inteiro', value: 'INTEGER' },\n    { key: '2', text: 'Real', value: 'FLOAT' },\n    { key: '3', text: 'Opções', value: 'SELECT' },\n]\n\nconst hasDataOptions = [\n    { key: '1', text: 'Sim', value: true },\n    { key: '2', text: 'Não', value: false },\n]\n\nconst evidenceRequirementOptions = [\n    { key: '1', text: 'Nenhuma evidência', value: 'NONE' },\n    { key: '2', text: 'Evidência opcional', value: 'OPTIONAL' },\n    { key: '3', text: 'Evidência obrigatória', value: 'REQUIRED' },\n]\n\nconst defaultState = {\n    valueType: '',\n    hasData: '',\n    evidenceRequirement: '',\n    unit: '',\n    id: '',\n    title: '',\n    description: '',\n    code: '',\n    expression: '',\n    dependencies: '',\n}\n\nconst MetricsEditor = ({ id }) => {\n\n    const [info, setInfo] = useState({ ...defaultState })\n    const [isNewMetric, setIsNewMetric] = useState(true)\n    const [options, setOptions] = useState([])\n\n    useEffect(() => {\n        const fetchData = async (id) => {\n\n            if (!id) return\n\n            try {\n                const { data } = await getMetricbyId(id)\n                setIsNewMetric(!!!data)\n                setInfo(data)\n            } catch {\n                setIsNewMetric(true)\n                setInfo({ ...defaultState, id: `${id}/` })\n            }\n        }\n\n        fetchData(id)\n    }, [id])\n\n    const handleChange = (name, value) => {\n        setInfo({ ...info, [name]: value })\n    }\n\n    // TODO, it makes the metric always be a SELECT\n    const onSubmit = async () => {\n        const data = info.valueType === 'SELECT'\n            ? { currentOption: options[0], options: options }\n            : ''\n\n\n        const submitInfo = { ...info, data }\n\n        try {\n            if (isNewMetric)\n                await postMetric(submitInfo)\n            else\n                await putMetric(submitInfo)\n            window.location.reload()\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const addOption = () => {\n        setOptions([...options, ''])\n    }\n\n    const removeOption = () => {\n        setOptions(options.slice(0, -1))\n    }\n\n    const handleChangeOption = (index, value) => {\n        const newOptions = [...options]\n        newOptions[index] = value\n        setOptions(newOptions)\n    }\n\n    return (\n        <Form onSubmit={onSubmit}>\n            <Form.Field>\n                <Checkbox\n                    checked={!isNewMetric}\n                    label={'Atualizar ID'}\n                    onChange={(e, { checked }) => { setIsNewMetric(!checked) }} />\n            </Form.Field>\n            <Form.Group widths='equal'>\n                <Form.Select\n                    options={typesOptions}\n                    placeholder='Tipo'\n                    label='Tipo'\n                    name='valueType'\n                    value={info.valueType}\n                    onChange={(e, { name, value }) => handleChange(name, value)}\n                />\n                <Form.Select\n                    options={hasDataOptions}\n                    placeholder='O campo é editável?'\n                    label='Dados'\n                    name='hasData'\n                    value={info.hasData}\n                    onChange={(e, { name, value }) => handleChange(name, value)}\n                />\n            </Form.Group>\n            <Form.Group widths='equal'>\n                <Form.Select\n                    options={evidenceRequirementOptions}\n                    placeholder='O campo possui evidência?'\n                    label='Evidência'\n                    name='evidenceRequirement'\n                    value={info.evidenceRequirement}\n                    onChange={(e, { name, value }) => handleChange(name, value)}\n                />\n                <Form.Input\n                    label=\"Unidade\"\n                    placeholder=\"Ex: m², %\"\n                    name='unit'\n                    value={info.unit}\n                    onChange={({ target }) => handleChange(target.name, target.value)}\n                />\n            </Form.Group>\n            <Form.Group widths='equal'>\n                <Form.Input\n                    disabled={!isNewMetric}\n                    label=\"ID\"\n                    placeholder=\"Valor único de identificação da métrica no banco de dados\"\n                    name='id'\n                    value={info.id}\n                    onChange={({ target }) => handleChange(target.name, target.value)}\n                />\n                <Form.Input\n                    label=\"Título\"\n                    placeholder=\"Nome da métrica\"\n                    name='title'\n                    value={info.title}\n                    onChange={({ target }) => handleChange(target.name, target.value)}\n                />\n            </Form.Group>\n            <Form.TextArea\n                label=\"Descrição\"\n                placeholder=\"Descreva em palavras como calcular esta métrica\"\n                name='description'\n                value={info.description}\n                onChange={({ target }) => handleChange(target.name, target.value)}\n            />\n            <Form.Input\n                label=\"Code\"\n                placeholder=\"Valor usado para criação do dashboard\"\n                name='code'\n                value={info.code}\n                onChange={({ target }) => handleChange(target.name, target.value)}\n            />\n            <Form.Input\n                label=\"Expressão\"\n                placeholder=\"Fórmula matemática para calcular a métrica\"\n                name='expression'\n                value={info.expression}\n                onChange={({ target }) => handleChange(target.name, target.value)}\n            />\n            {info.valueType === 'SELECT' &&\n                <>\n                    <p>Opções</p>\n                    {options.map((el, index) =>\n                        <Form.Input\n                            key={index}\n                            placeholder=\"Opção 1\"\n                            name='options'\n                            value={el.value}\n                            onChange={({ target }) => handleChangeOption(index, target.value)}\n                        />)}\n                    <Form.Group>\n                        <Form.Button\n                            color='green'\n                            type='button'\n                            onClick={() => { addOption() }}>\n                            Adicionar\n                        </Form.Button>\n                        <Form.Button\n                            color='red'\n                            type='button'\n                            onClick={() => { removeOption() }}>\n                            Remover\n                        </Form.Button>\n                    </Form.Group>\n                </>\n            }\n            <div className='app-footer'>\n                <Form.Button\n                    primary\n                    className=\"centered\"\n                    color='black'\n                    type='submit'>Enviar</Form.Button>\n            </div>\n        </Form>\n    )\n}\n\nexport default MetricsEditor"]},"metadata":{},"sourceType":"module"}